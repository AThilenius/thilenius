/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thilenius.sentinel.proto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-20")
public class Sentinel {

  public interface Iface {

    public User CreateUser(User new_user_partial, String password) throws OperationFailure, org.apache.thrift.TException;

    public Token CreateToken(String email_address, String password) throws OperationFailure, org.apache.thrift.TException;

    public Token CreateSecondaryToken(Token token, int permission_level) throws OperationFailure, org.apache.thrift.TException;

    public boolean CheckToken(Token token) throws OperationFailure, org.apache.thrift.TException;

    public User FindUser(Token token, User user_partial) throws OperationFailure, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CreateUser(User new_user_partial, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateToken(String email_address, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateSecondaryToken(Token token, int permission_level, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CheckToken(Token token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void FindUser(Token token, User user_partial, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public User CreateUser(User new_user_partial, String password) throws OperationFailure, org.apache.thrift.TException
    {
      send_CreateUser(new_user_partial, password);
      return recv_CreateUser();
    }

    public void send_CreateUser(User new_user_partial, String password) throws org.apache.thrift.TException
    {
      CreateUser_args args = new CreateUser_args();
      args.setNew_user_partial(new_user_partial);
      args.setPassword(password);
      sendBase("CreateUser", args);
    }

    public User recv_CreateUser() throws OperationFailure, org.apache.thrift.TException
    {
      CreateUser_result result = new CreateUser_result();
      receiveBase(result, "CreateUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateUser failed: unknown result");
    }

    public Token CreateToken(String email_address, String password) throws OperationFailure, org.apache.thrift.TException
    {
      send_CreateToken(email_address, password);
      return recv_CreateToken();
    }

    public void send_CreateToken(String email_address, String password) throws org.apache.thrift.TException
    {
      CreateToken_args args = new CreateToken_args();
      args.setEmail_address(email_address);
      args.setPassword(password);
      sendBase("CreateToken", args);
    }

    public Token recv_CreateToken() throws OperationFailure, org.apache.thrift.TException
    {
      CreateToken_result result = new CreateToken_result();
      receiveBase(result, "CreateToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateToken failed: unknown result");
    }

    public Token CreateSecondaryToken(Token token, int permission_level) throws OperationFailure, org.apache.thrift.TException
    {
      send_CreateSecondaryToken(token, permission_level);
      return recv_CreateSecondaryToken();
    }

    public void send_CreateSecondaryToken(Token token, int permission_level) throws org.apache.thrift.TException
    {
      CreateSecondaryToken_args args = new CreateSecondaryToken_args();
      args.setToken(token);
      args.setPermission_level(permission_level);
      sendBase("CreateSecondaryToken", args);
    }

    public Token recv_CreateSecondaryToken() throws OperationFailure, org.apache.thrift.TException
    {
      CreateSecondaryToken_result result = new CreateSecondaryToken_result();
      receiveBase(result, "CreateSecondaryToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateSecondaryToken failed: unknown result");
    }

    public boolean CheckToken(Token token) throws OperationFailure, org.apache.thrift.TException
    {
      send_CheckToken(token);
      return recv_CheckToken();
    }

    public void send_CheckToken(Token token) throws org.apache.thrift.TException
    {
      CheckToken_args args = new CheckToken_args();
      args.setToken(token);
      sendBase("CheckToken", args);
    }

    public boolean recv_CheckToken() throws OperationFailure, org.apache.thrift.TException
    {
      CheckToken_result result = new CheckToken_result();
      receiveBase(result, "CheckToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CheckToken failed: unknown result");
    }

    public User FindUser(Token token, User user_partial) throws OperationFailure, org.apache.thrift.TException
    {
      send_FindUser(token, user_partial);
      return recv_FindUser();
    }

    public void send_FindUser(Token token, User user_partial) throws org.apache.thrift.TException
    {
      FindUser_args args = new FindUser_args();
      args.setToken(token);
      args.setUser_partial(user_partial);
      sendBase("FindUser", args);
    }

    public User recv_FindUser() throws OperationFailure, org.apache.thrift.TException
    {
      FindUser_result result = new FindUser_result();
      receiveBase(result, "FindUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FindUser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CreateUser(User new_user_partial, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateUser_call method_call = new CreateUser_call(new_user_partial, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User new_user_partial;
      private String password;
      public CreateUser_call(User new_user_partial, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.new_user_partial = new_user_partial;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateUser_args args = new CreateUser_args();
        args.setNew_user_partial(new_user_partial);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public User getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateUser();
      }
    }

    public void CreateToken(String email_address, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateToken_call method_call = new CreateToken_call(email_address, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email_address;
      private String password;
      public CreateToken_call(String email_address, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email_address = email_address;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateToken_args args = new CreateToken_args();
        args.setEmail_address(email_address);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Token getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateToken();
      }
    }

    public void CreateSecondaryToken(Token token, int permission_level, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateSecondaryToken_call method_call = new CreateSecondaryToken_call(token, permission_level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateSecondaryToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Token token;
      private int permission_level;
      public CreateSecondaryToken_call(Token token, int permission_level, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.permission_level = permission_level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateSecondaryToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateSecondaryToken_args args = new CreateSecondaryToken_args();
        args.setToken(token);
        args.setPermission_level(permission_level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Token getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateSecondaryToken();
      }
    }

    public void CheckToken(Token token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CheckToken_call method_call = new CheckToken_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CheckToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Token token;
      public CheckToken_call(Token token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CheckToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CheckToken_args args = new CheckToken_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CheckToken();
      }
    }

    public void FindUser(Token token, User user_partial, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FindUser_call method_call = new FindUser_call(token, user_partial, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FindUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Token token;
      private User user_partial;
      public FindUser_call(Token token, User user_partial, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.user_partial = user_partial;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FindUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FindUser_args args = new FindUser_args();
        args.setToken(token);
        args.setUser_partial(user_partial);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public User getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FindUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateUser", new CreateUser());
      processMap.put("CreateToken", new CreateToken());
      processMap.put("CreateSecondaryToken", new CreateSecondaryToken());
      processMap.put("CheckToken", new CheckToken());
      processMap.put("FindUser", new FindUser());
      return processMap;
    }

    public static class CreateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateUser_args> {
      public CreateUser() {
        super("CreateUser");
      }

      public CreateUser_args getEmptyArgsInstance() {
        return new CreateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateUser_result getResult(I iface, CreateUser_args args) throws org.apache.thrift.TException {
        CreateUser_result result = new CreateUser_result();
        try {
          result.success = iface.CreateUser(args.new_user_partial, args.password);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

    public static class CreateToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateToken_args> {
      public CreateToken() {
        super("CreateToken");
      }

      public CreateToken_args getEmptyArgsInstance() {
        return new CreateToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateToken_result getResult(I iface, CreateToken_args args) throws org.apache.thrift.TException {
        CreateToken_result result = new CreateToken_result();
        try {
          result.success = iface.CreateToken(args.email_address, args.password);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

    public static class CreateSecondaryToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateSecondaryToken_args> {
      public CreateSecondaryToken() {
        super("CreateSecondaryToken");
      }

      public CreateSecondaryToken_args getEmptyArgsInstance() {
        return new CreateSecondaryToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateSecondaryToken_result getResult(I iface, CreateSecondaryToken_args args) throws org.apache.thrift.TException {
        CreateSecondaryToken_result result = new CreateSecondaryToken_result();
        try {
          result.success = iface.CreateSecondaryToken(args.token, args.permission_level);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

    public static class CheckToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CheckToken_args> {
      public CheckToken() {
        super("CheckToken");
      }

      public CheckToken_args getEmptyArgsInstance() {
        return new CheckToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CheckToken_result getResult(I iface, CheckToken_args args) throws org.apache.thrift.TException {
        CheckToken_result result = new CheckToken_result();
        try {
          result.success = iface.CheckToken(args.token);
          result.setSuccessIsSet(true);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

    public static class FindUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FindUser_args> {
      public FindUser() {
        super("FindUser");
      }

      public FindUser_args getEmptyArgsInstance() {
        return new FindUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public FindUser_result getResult(I iface, FindUser_args args) throws org.apache.thrift.TException {
        FindUser_result result = new FindUser_result();
        try {
          result.success = iface.FindUser(args.token, args.user_partial);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CreateUser", new CreateUser());
      processMap.put("CreateToken", new CreateToken());
      processMap.put("CreateSecondaryToken", new CreateSecondaryToken());
      processMap.put("CheckToken", new CheckToken());
      processMap.put("FindUser", new FindUser());
      return processMap;
    }

    public static class CreateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateUser_args, User> {
      public CreateUser() {
        super("CreateUser");
      }

      public CreateUser_args getEmptyArgsInstance() {
        return new CreateUser_args();
      }

      public AsyncMethodCallback<User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<User>() { 
          public void onComplete(User o) {
            CreateUser_result result = new CreateUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateUser_result result = new CreateUser_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateUser_args args, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws TException {
        iface.CreateUser(args.new_user_partial, args.password,resultHandler);
      }
    }

    public static class CreateToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateToken_args, Token> {
      public CreateToken() {
        super("CreateToken");
      }

      public CreateToken_args getEmptyArgsInstance() {
        return new CreateToken_args();
      }

      public AsyncMethodCallback<Token> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Token>() { 
          public void onComplete(Token o) {
            CreateToken_result result = new CreateToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateToken_result result = new CreateToken_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateToken_args args, org.apache.thrift.async.AsyncMethodCallback<Token> resultHandler) throws TException {
        iface.CreateToken(args.email_address, args.password,resultHandler);
      }
    }

    public static class CreateSecondaryToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateSecondaryToken_args, Token> {
      public CreateSecondaryToken() {
        super("CreateSecondaryToken");
      }

      public CreateSecondaryToken_args getEmptyArgsInstance() {
        return new CreateSecondaryToken_args();
      }

      public AsyncMethodCallback<Token> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Token>() { 
          public void onComplete(Token o) {
            CreateSecondaryToken_result result = new CreateSecondaryToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateSecondaryToken_result result = new CreateSecondaryToken_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateSecondaryToken_args args, org.apache.thrift.async.AsyncMethodCallback<Token> resultHandler) throws TException {
        iface.CreateSecondaryToken(args.token, args.permission_level,resultHandler);
      }
    }

    public static class CheckToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CheckToken_args, Boolean> {
      public CheckToken() {
        super("CheckToken");
      }

      public CheckToken_args getEmptyArgsInstance() {
        return new CheckToken_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            CheckToken_result result = new CheckToken_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CheckToken_result result = new CheckToken_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CheckToken_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.CheckToken(args.token,resultHandler);
      }
    }

    public static class FindUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FindUser_args, User> {
      public FindUser() {
        super("FindUser");
      }

      public FindUser_args getEmptyArgsInstance() {
        return new FindUser_args();
      }

      public AsyncMethodCallback<User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<User>() { 
          public void onComplete(User o) {
            FindUser_result result = new FindUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            FindUser_result result = new FindUser_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FindUser_args args, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws TException {
        iface.FindUser(args.token, args.user_partial,resultHandler);
      }
    }

  }

  public static class CreateUser_args implements org.apache.thrift.TBase<CreateUser_args, CreateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateUser_args");

    private static final org.apache.thrift.protocol.TField NEW_USER_PARTIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("new_user_partial", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateUser_argsTupleSchemeFactory());
    }

    public User new_user_partial; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_USER_PARTIAL((short)1, "new_user_partial"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_USER_PARTIAL
            return NEW_USER_PARTIAL;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_USER_PARTIAL, new org.apache.thrift.meta_data.FieldMetaData("new_user_partial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateUser_args.class, metaDataMap);
    }

    public CreateUser_args() {
    }

    public CreateUser_args(
      User new_user_partial,
      String password)
    {
      this();
      this.new_user_partial = new_user_partial;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateUser_args(CreateUser_args other) {
      if (other.isSetNew_user_partial()) {
        this.new_user_partial = new User(other.new_user_partial);
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public CreateUser_args deepCopy() {
      return new CreateUser_args(this);
    }

    @Override
    public void clear() {
      this.new_user_partial = null;
      this.password = null;
    }

    public User getNew_user_partial() {
      return this.new_user_partial;
    }

    public CreateUser_args setNew_user_partial(User new_user_partial) {
      this.new_user_partial = new_user_partial;
      return this;
    }

    public void unsetNew_user_partial() {
      this.new_user_partial = null;
    }

    /** Returns true if field new_user_partial is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_user_partial() {
      return this.new_user_partial != null;
    }

    public void setNew_user_partialIsSet(boolean value) {
      if (!value) {
        this.new_user_partial = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public CreateUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_USER_PARTIAL:
        if (value == null) {
          unsetNew_user_partial();
        } else {
          setNew_user_partial((User)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_USER_PARTIAL:
        return getNew_user_partial();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_USER_PARTIAL:
        return isSetNew_user_partial();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateUser_args)
        return this.equals((CreateUser_args)that);
      return false;
    }

    public boolean equals(CreateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_new_user_partial = true && this.isSetNew_user_partial();
      boolean that_present_new_user_partial = true && that.isSetNew_user_partial();
      if (this_present_new_user_partial || that_present_new_user_partial) {
        if (!(this_present_new_user_partial && that_present_new_user_partial))
          return false;
        if (!this.new_user_partial.equals(that.new_user_partial))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_new_user_partial = true && (isSetNew_user_partial());
      list.add(present_new_user_partial);
      if (present_new_user_partial)
        list.add(new_user_partial);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNew_user_partial()).compareTo(other.isSetNew_user_partial());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_user_partial()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_user_partial, other.new_user_partial);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateUser_args(");
      boolean first = true;

      sb.append("new_user_partial:");
      if (this.new_user_partial == null) {
        sb.append("null");
      } else {
        sb.append(this.new_user_partial);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (new_user_partial != null) {
        new_user_partial.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateUser_argsStandardSchemeFactory implements SchemeFactory {
      public CreateUser_argsStandardScheme getScheme() {
        return new CreateUser_argsStandardScheme();
      }
    }

    private static class CreateUser_argsStandardScheme extends StandardScheme<CreateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_USER_PARTIAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.new_user_partial = new User();
                struct.new_user_partial.read(iprot);
                struct.setNew_user_partialIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.new_user_partial != null) {
          oprot.writeFieldBegin(NEW_USER_PARTIAL_FIELD_DESC);
          struct.new_user_partial.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateUser_argsTupleSchemeFactory implements SchemeFactory {
      public CreateUser_argsTupleScheme getScheme() {
        return new CreateUser_argsTupleScheme();
      }
    }

    private static class CreateUser_argsTupleScheme extends TupleScheme<CreateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNew_user_partial()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNew_user_partial()) {
          struct.new_user_partial.write(oprot);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.new_user_partial = new User();
          struct.new_user_partial.read(iprot);
          struct.setNew_user_partialIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class CreateUser_result implements org.apache.thrift.TBase<CreateUser_result, CreateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateUser_resultTupleSchemeFactory());
    }

    public User success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateUser_result.class, metaDataMap);
    }

    public CreateUser_result() {
    }

    public CreateUser_result(
      User success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateUser_result(CreateUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public CreateUser_result deepCopy() {
      return new CreateUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.operation_failure = null;
    }

    public User getSuccess() {
      return this.success;
    }

    public CreateUser_result setSuccess(User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public CreateUser_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateUser_result)
        return this.equals((CreateUser_result)that);
      return false;
    }

    public boolean equals(CreateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateUser_resultStandardSchemeFactory implements SchemeFactory {
      public CreateUser_resultStandardScheme getScheme() {
        return new CreateUser_resultStandardScheme();
      }
    }

    private static class CreateUser_resultStandardScheme extends StandardScheme<CreateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateUser_resultTupleSchemeFactory implements SchemeFactory {
      public CreateUser_resultTupleScheme getScheme() {
        return new CreateUser_resultTupleScheme();
      }
    }

    private static class CreateUser_resultTupleScheme extends TupleScheme<CreateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

  public static class CreateToken_args implements org.apache.thrift.TBase<CreateToken_args, CreateToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateToken_args");

    private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("email_address", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateToken_argsTupleSchemeFactory());
    }

    public String email_address; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL_ADDRESS((short)1, "email_address"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL_ADDRESS
            return EMAIL_ADDRESS;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("email_address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateToken_args.class, metaDataMap);
    }

    public CreateToken_args() {
    }

    public CreateToken_args(
      String email_address,
      String password)
    {
      this();
      this.email_address = email_address;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateToken_args(CreateToken_args other) {
      if (other.isSetEmail_address()) {
        this.email_address = other.email_address;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public CreateToken_args deepCopy() {
      return new CreateToken_args(this);
    }

    @Override
    public void clear() {
      this.email_address = null;
      this.password = null;
    }

    public String getEmail_address() {
      return this.email_address;
    }

    public CreateToken_args setEmail_address(String email_address) {
      this.email_address = email_address;
      return this;
    }

    public void unsetEmail_address() {
      this.email_address = null;
    }

    /** Returns true if field email_address is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail_address() {
      return this.email_address != null;
    }

    public void setEmail_addressIsSet(boolean value) {
      if (!value) {
        this.email_address = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public CreateToken_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL_ADDRESS:
        if (value == null) {
          unsetEmail_address();
        } else {
          setEmail_address((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL_ADDRESS:
        return getEmail_address();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL_ADDRESS:
        return isSetEmail_address();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateToken_args)
        return this.equals((CreateToken_args)that);
      return false;
    }

    public boolean equals(CreateToken_args that) {
      if (that == null)
        return false;

      boolean this_present_email_address = true && this.isSetEmail_address();
      boolean that_present_email_address = true && that.isSetEmail_address();
      if (this_present_email_address || that_present_email_address) {
        if (!(this_present_email_address && that_present_email_address))
          return false;
        if (!this.email_address.equals(that.email_address))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email_address = true && (isSetEmail_address());
      list.add(present_email_address);
      if (present_email_address)
        list.add(email_address);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail_address()).compareTo(other.isSetEmail_address());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail_address()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email_address, other.email_address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateToken_args(");
      boolean first = true;

      sb.append("email_address:");
      if (this.email_address == null) {
        sb.append("null");
      } else {
        sb.append(this.email_address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateToken_argsStandardSchemeFactory implements SchemeFactory {
      public CreateToken_argsStandardScheme getScheme() {
        return new CreateToken_argsStandardScheme();
      }
    }

    private static class CreateToken_argsStandardScheme extends StandardScheme<CreateToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email_address = iprot.readString();
                struct.setEmail_addressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email_address != null) {
          oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.email_address);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateToken_argsTupleSchemeFactory implements SchemeFactory {
      public CreateToken_argsTupleScheme getScheme() {
        return new CreateToken_argsTupleScheme();
      }
    }

    private static class CreateToken_argsTupleScheme extends TupleScheme<CreateToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail_address()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmail_address()) {
          oprot.writeString(struct.email_address);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.email_address = iprot.readString();
          struct.setEmail_addressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class CreateToken_result implements org.apache.thrift.TBase<CreateToken_result, CreateToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateToken_resultTupleSchemeFactory());
    }

    public Token success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateToken_result.class, metaDataMap);
    }

    public CreateToken_result() {
    }

    public CreateToken_result(
      Token success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateToken_result(CreateToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new Token(other.success);
      }
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public CreateToken_result deepCopy() {
      return new CreateToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.operation_failure = null;
    }

    public Token getSuccess() {
      return this.success;
    }

    public CreateToken_result setSuccess(Token success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public CreateToken_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Token)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateToken_result)
        return this.equals((CreateToken_result)that);
      return false;
    }

    public boolean equals(CreateToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateToken_resultStandardSchemeFactory implements SchemeFactory {
      public CreateToken_resultStandardScheme getScheme() {
        return new CreateToken_resultStandardScheme();
      }
    }

    private static class CreateToken_resultStandardScheme extends StandardScheme<CreateToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Token();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateToken_resultTupleSchemeFactory implements SchemeFactory {
      public CreateToken_resultTupleScheme getScheme() {
        return new CreateToken_resultTupleScheme();
      }
    }

    private static class CreateToken_resultTupleScheme extends TupleScheme<CreateToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Token();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

  public static class CreateSecondaryToken_args implements org.apache.thrift.TBase<CreateSecondaryToken_args, CreateSecondaryToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSecondaryToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSecondaryToken_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERMISSION_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("permission_level", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateSecondaryToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateSecondaryToken_argsTupleSchemeFactory());
    }

    public Token token; // required
    public int permission_level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PERMISSION_LEVEL((short)2, "permission_level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PERMISSION_LEVEL
            return PERMISSION_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERMISSION_LEVEL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
      tmpMap.put(_Fields.PERMISSION_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("permission_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSecondaryToken_args.class, metaDataMap);
    }

    public CreateSecondaryToken_args() {
    }

    public CreateSecondaryToken_args(
      Token token,
      int permission_level)
    {
      this();
      this.token = token;
      this.permission_level = permission_level;
      setPermission_levelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSecondaryToken_args(CreateSecondaryToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new Token(other.token);
      }
      this.permission_level = other.permission_level;
    }

    public CreateSecondaryToken_args deepCopy() {
      return new CreateSecondaryToken_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setPermission_levelIsSet(false);
      this.permission_level = 0;
    }

    public Token getToken() {
      return this.token;
    }

    public CreateSecondaryToken_args setToken(Token token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getPermission_level() {
      return this.permission_level;
    }

    public CreateSecondaryToken_args setPermission_level(int permission_level) {
      this.permission_level = permission_level;
      setPermission_levelIsSet(true);
      return this;
    }

    public void unsetPermission_level() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERMISSION_LEVEL_ISSET_ID);
    }

    /** Returns true if field permission_level is set (has been assigned a value) and false otherwise */
    public boolean isSetPermission_level() {
      return EncodingUtils.testBit(__isset_bitfield, __PERMISSION_LEVEL_ISSET_ID);
    }

    public void setPermission_levelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERMISSION_LEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((Token)value);
        }
        break;

      case PERMISSION_LEVEL:
        if (value == null) {
          unsetPermission_level();
        } else {
          setPermission_level((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PERMISSION_LEVEL:
        return Integer.valueOf(getPermission_level());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PERMISSION_LEVEL:
        return isSetPermission_level();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSecondaryToken_args)
        return this.equals((CreateSecondaryToken_args)that);
      return false;
    }

    public boolean equals(CreateSecondaryToken_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_permission_level = true;
      boolean that_present_permission_level = true;
      if (this_present_permission_level || that_present_permission_level) {
        if (!(this_present_permission_level && that_present_permission_level))
          return false;
        if (this.permission_level != that.permission_level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_permission_level = true;
      list.add(present_permission_level);
      if (present_permission_level)
        list.add(permission_level);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateSecondaryToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermission_level()).compareTo(other.isSetPermission_level());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermission_level()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permission_level, other.permission_level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateSecondaryToken_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("permission_level:");
      sb.append(this.permission_level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSecondaryToken_argsStandardSchemeFactory implements SchemeFactory {
      public CreateSecondaryToken_argsStandardScheme getScheme() {
        return new CreateSecondaryToken_argsStandardScheme();
      }
    }

    private static class CreateSecondaryToken_argsStandardScheme extends StandardScheme<CreateSecondaryToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSecondaryToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new Token();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERMISSION_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.permission_level = iprot.readI32();
                struct.setPermission_levelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSecondaryToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERMISSION_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.permission_level);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSecondaryToken_argsTupleSchemeFactory implements SchemeFactory {
      public CreateSecondaryToken_argsTupleScheme getScheme() {
        return new CreateSecondaryToken_argsTupleScheme();
      }
    }

    private static class CreateSecondaryToken_argsTupleScheme extends TupleScheme<CreateSecondaryToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSecondaryToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetPermission_level()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
        if (struct.isSetPermission_level()) {
          oprot.writeI32(struct.permission_level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSecondaryToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = new Token();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.permission_level = iprot.readI32();
          struct.setPermission_levelIsSet(true);
        }
      }
    }

  }

  public static class CreateSecondaryToken_result implements org.apache.thrift.TBase<CreateSecondaryToken_result, CreateSecondaryToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSecondaryToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSecondaryToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateSecondaryToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateSecondaryToken_resultTupleSchemeFactory());
    }

    public Token success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSecondaryToken_result.class, metaDataMap);
    }

    public CreateSecondaryToken_result() {
    }

    public CreateSecondaryToken_result(
      Token success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSecondaryToken_result(CreateSecondaryToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new Token(other.success);
      }
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public CreateSecondaryToken_result deepCopy() {
      return new CreateSecondaryToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.operation_failure = null;
    }

    public Token getSuccess() {
      return this.success;
    }

    public CreateSecondaryToken_result setSuccess(Token success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public CreateSecondaryToken_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Token)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSecondaryToken_result)
        return this.equals((CreateSecondaryToken_result)that);
      return false;
    }

    public boolean equals(CreateSecondaryToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateSecondaryToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateSecondaryToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSecondaryToken_resultStandardSchemeFactory implements SchemeFactory {
      public CreateSecondaryToken_resultStandardScheme getScheme() {
        return new CreateSecondaryToken_resultStandardScheme();
      }
    }

    private static class CreateSecondaryToken_resultStandardScheme extends StandardScheme<CreateSecondaryToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSecondaryToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Token();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSecondaryToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSecondaryToken_resultTupleSchemeFactory implements SchemeFactory {
      public CreateSecondaryToken_resultTupleScheme getScheme() {
        return new CreateSecondaryToken_resultTupleScheme();
      }
    }

    private static class CreateSecondaryToken_resultTupleScheme extends TupleScheme<CreateSecondaryToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSecondaryToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSecondaryToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Token();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

  public static class CheckToken_args implements org.apache.thrift.TBase<CheckToken_args, CheckToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<CheckToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckToken_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CheckToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CheckToken_argsTupleSchemeFactory());
    }

    public Token token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckToken_args.class, metaDataMap);
    }

    public CheckToken_args() {
    }

    public CheckToken_args(
      Token token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckToken_args(CheckToken_args other) {
      if (other.isSetToken()) {
        this.token = new Token(other.token);
      }
    }

    public CheckToken_args deepCopy() {
      return new CheckToken_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public Token getToken() {
      return this.token;
    }

    public CheckToken_args setToken(Token token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((Token)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckToken_args)
        return this.equals((CheckToken_args)that);
      return false;
    }

    public boolean equals(CheckToken_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(CheckToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CheckToken_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckToken_argsStandardSchemeFactory implements SchemeFactory {
      public CheckToken_argsStandardScheme getScheme() {
        return new CheckToken_argsStandardScheme();
      }
    }

    private static class CheckToken_argsStandardScheme extends StandardScheme<CheckToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new Token();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckToken_argsTupleSchemeFactory implements SchemeFactory {
      public CheckToken_argsTupleScheme getScheme() {
        return new CheckToken_argsTupleScheme();
      }
    }

    private static class CheckToken_argsTupleScheme extends TupleScheme<CheckToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = new Token();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class CheckToken_result implements org.apache.thrift.TBase<CheckToken_result, CheckToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<CheckToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CheckToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CheckToken_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckToken_result.class, metaDataMap);
    }

    public CheckToken_result() {
    }

    public CheckToken_result(
      boolean success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CheckToken_result(CheckToken_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public CheckToken_result deepCopy() {
      return new CheckToken_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.operation_failure = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CheckToken_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public CheckToken_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CheckToken_result)
        return this.equals((CheckToken_result)that);
      return false;
    }

    public boolean equals(CheckToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(CheckToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CheckToken_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CheckToken_resultStandardSchemeFactory implements SchemeFactory {
      public CheckToken_resultStandardScheme getScheme() {
        return new CheckToken_resultStandardScheme();
      }
    }

    private static class CheckToken_resultStandardScheme extends StandardScheme<CheckToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CheckToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CheckToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CheckToken_resultTupleSchemeFactory implements SchemeFactory {
      public CheckToken_resultTupleScheme getScheme() {
        return new CheckToken_resultTupleScheme();
      }
    }

    private static class CheckToken_resultTupleScheme extends TupleScheme<CheckToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CheckToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CheckToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

  public static class FindUser_args implements org.apache.thrift.TBase<FindUser_args, FindUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<FindUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindUser_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_PARTIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("user_partial", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FindUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FindUser_argsTupleSchemeFactory());
    }

    public Token token; // required
    public User user_partial; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      USER_PARTIAL((short)2, "user_partial");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // USER_PARTIAL
            return USER_PARTIAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
      tmpMap.put(_Fields.USER_PARTIAL, new org.apache.thrift.meta_data.FieldMetaData("user_partial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindUser_args.class, metaDataMap);
    }

    public FindUser_args() {
    }

    public FindUser_args(
      Token token,
      User user_partial)
    {
      this();
      this.token = token;
      this.user_partial = user_partial;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindUser_args(FindUser_args other) {
      if (other.isSetToken()) {
        this.token = new Token(other.token);
      }
      if (other.isSetUser_partial()) {
        this.user_partial = new User(other.user_partial);
      }
    }

    public FindUser_args deepCopy() {
      return new FindUser_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.user_partial = null;
    }

    public Token getToken() {
      return this.token;
    }

    public FindUser_args setToken(Token token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public User getUser_partial() {
      return this.user_partial;
    }

    public FindUser_args setUser_partial(User user_partial) {
      this.user_partial = user_partial;
      return this;
    }

    public void unsetUser_partial() {
      this.user_partial = null;
    }

    /** Returns true if field user_partial is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_partial() {
      return this.user_partial != null;
    }

    public void setUser_partialIsSet(boolean value) {
      if (!value) {
        this.user_partial = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((Token)value);
        }
        break;

      case USER_PARTIAL:
        if (value == null) {
          unsetUser_partial();
        } else {
          setUser_partial((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case USER_PARTIAL:
        return getUser_partial();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case USER_PARTIAL:
        return isSetUser_partial();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FindUser_args)
        return this.equals((FindUser_args)that);
      return false;
    }

    public boolean equals(FindUser_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_user_partial = true && this.isSetUser_partial();
      boolean that_present_user_partial = true && that.isSetUser_partial();
      if (this_present_user_partial || that_present_user_partial) {
        if (!(this_present_user_partial && that_present_user_partial))
          return false;
        if (!this.user_partial.equals(that.user_partial))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_user_partial = true && (isSetUser_partial());
      list.add(present_user_partial);
      if (present_user_partial)
        list.add(user_partial);

      return list.hashCode();
    }

    @Override
    public int compareTo(FindUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_partial()).compareTo(other.isSetUser_partial());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_partial()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_partial, other.user_partial);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FindUser_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_partial:");
      if (this.user_partial == null) {
        sb.append("null");
      } else {
        sb.append(this.user_partial);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
      if (user_partial != null) {
        user_partial.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindUser_argsStandardSchemeFactory implements SchemeFactory {
      public FindUser_argsStandardScheme getScheme() {
        return new FindUser_argsStandardScheme();
      }
    }

    private static class FindUser_argsStandardScheme extends StandardScheme<FindUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new Token();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_PARTIAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user_partial = new User();
                struct.user_partial.read(iprot);
                struct.setUser_partialIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.user_partial != null) {
          oprot.writeFieldBegin(USER_PARTIAL_FIELD_DESC);
          struct.user_partial.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindUser_argsTupleSchemeFactory implements SchemeFactory {
      public FindUser_argsTupleScheme getScheme() {
        return new FindUser_argsTupleScheme();
      }
    }

    private static class FindUser_argsTupleScheme extends TupleScheme<FindUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetUser_partial()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
        if (struct.isSetUser_partial()) {
          struct.user_partial.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = new Token();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_partial = new User();
          struct.user_partial.read(iprot);
          struct.setUser_partialIsSet(true);
        }
      }
    }

  }

  public static class FindUser_result implements org.apache.thrift.TBase<FindUser_result, FindUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<FindUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FindUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FindUser_resultTupleSchemeFactory());
    }

    public User success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindUser_result.class, metaDataMap);
    }

    public FindUser_result() {
    }

    public FindUser_result(
      User success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FindUser_result(FindUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public FindUser_result deepCopy() {
      return new FindUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.operation_failure = null;
    }

    public User getSuccess() {
      return this.success;
    }

    public FindUser_result setSuccess(User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public FindUser_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FindUser_result)
        return this.equals((FindUser_result)that);
      return false;
    }

    public boolean equals(FindUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(FindUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FindUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FindUser_resultStandardSchemeFactory implements SchemeFactory {
      public FindUser_resultStandardScheme getScheme() {
        return new FindUser_resultStandardScheme();
      }
    }

    private static class FindUser_resultStandardScheme extends StandardScheme<FindUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FindUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FindUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FindUser_resultTupleSchemeFactory implements SchemeFactory {
      public FindUser_resultTupleScheme getScheme() {
        return new FindUser_resultTupleScheme();
      }
    }

    private static class FindUser_resultTupleScheme extends TupleScheme<FindUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FindUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FindUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

}
