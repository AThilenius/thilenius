/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thilenius.blaze.proto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-20")
public class Blaze {

  public interface Iface {

    public String ProcessBlazeRequest(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json) throws OperationFailure, org.apache.thrift.TException;

    public void SetMinecraftAccount(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account) throws OperationFailure, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ProcessBlazeRequest(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SetMinecraftAccount(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String ProcessBlazeRequest(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json) throws OperationFailure, org.apache.thrift.TException
    {
      send_ProcessBlazeRequest(token, command_name, args_json);
      return recv_ProcessBlazeRequest();
    }

    public void send_ProcessBlazeRequest(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json) throws org.apache.thrift.TException
    {
      ProcessBlazeRequest_args args = new ProcessBlazeRequest_args();
      args.setToken(token);
      args.setCommand_name(command_name);
      args.setArgs_json(args_json);
      sendBase("ProcessBlazeRequest", args);
    }

    public String recv_ProcessBlazeRequest() throws OperationFailure, org.apache.thrift.TException
    {
      ProcessBlazeRequest_result result = new ProcessBlazeRequest_result();
      receiveBase(result, "ProcessBlazeRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ProcessBlazeRequest failed: unknown result");
    }

    public void SetMinecraftAccount(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account) throws OperationFailure, org.apache.thrift.TException
    {
      send_SetMinecraftAccount(token, minecraft_account);
      recv_SetMinecraftAccount();
    }

    public void send_SetMinecraftAccount(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account) throws org.apache.thrift.TException
    {
      SetMinecraftAccount_args args = new SetMinecraftAccount_args();
      args.setToken(token);
      args.setMinecraft_account(minecraft_account);
      sendBase("SetMinecraftAccount", args);
    }

    public void recv_SetMinecraftAccount() throws OperationFailure, org.apache.thrift.TException
    {
      SetMinecraftAccount_result result = new SetMinecraftAccount_result();
      receiveBase(result, "SetMinecraftAccount");
      if (result.operation_failure != null) {
        throw result.operation_failure;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ProcessBlazeRequest(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ProcessBlazeRequest_call method_call = new ProcessBlazeRequest_call(token, command_name, args_json, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ProcessBlazeRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.thilenius.sentinel.proto.Token token;
      private String command_name;
      private List<String> args_json;
      public ProcessBlazeRequest_call(com.thilenius.sentinel.proto.Token token, String command_name, List<String> args_json, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.command_name = command_name;
        this.args_json = args_json;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ProcessBlazeRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ProcessBlazeRequest_args args = new ProcessBlazeRequest_args();
        args.setToken(token);
        args.setCommand_name(command_name);
        args.setArgs_json(args_json);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ProcessBlazeRequest();
      }
    }

    public void SetMinecraftAccount(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetMinecraftAccount_call method_call = new SetMinecraftAccount_call(token, minecraft_account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetMinecraftAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.thilenius.sentinel.proto.Token token;
      private MinecraftAccount minecraft_account;
      public SetMinecraftAccount_call(com.thilenius.sentinel.proto.Token token, MinecraftAccount minecraft_account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.minecraft_account = minecraft_account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetMinecraftAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetMinecraftAccount_args args = new SetMinecraftAccount_args();
        args.setToken(token);
        args.setMinecraft_account(minecraft_account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws OperationFailure, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetMinecraftAccount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ProcessBlazeRequest", new ProcessBlazeRequest());
      processMap.put("SetMinecraftAccount", new SetMinecraftAccount());
      return processMap;
    }

    public static class ProcessBlazeRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ProcessBlazeRequest_args> {
      public ProcessBlazeRequest() {
        super("ProcessBlazeRequest");
      }

      public ProcessBlazeRequest_args getEmptyArgsInstance() {
        return new ProcessBlazeRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ProcessBlazeRequest_result getResult(I iface, ProcessBlazeRequest_args args) throws org.apache.thrift.TException {
        ProcessBlazeRequest_result result = new ProcessBlazeRequest_result();
        try {
          result.success = iface.ProcessBlazeRequest(args.token, args.command_name, args.args_json);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

    public static class SetMinecraftAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetMinecraftAccount_args> {
      public SetMinecraftAccount() {
        super("SetMinecraftAccount");
      }

      public SetMinecraftAccount_args getEmptyArgsInstance() {
        return new SetMinecraftAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SetMinecraftAccount_result getResult(I iface, SetMinecraftAccount_args args) throws org.apache.thrift.TException {
        SetMinecraftAccount_result result = new SetMinecraftAccount_result();
        try {
          iface.SetMinecraftAccount(args.token, args.minecraft_account);
        } catch (OperationFailure operation_failure) {
          result.operation_failure = operation_failure;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ProcessBlazeRequest", new ProcessBlazeRequest());
      processMap.put("SetMinecraftAccount", new SetMinecraftAccount());
      return processMap;
    }

    public static class ProcessBlazeRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ProcessBlazeRequest_args, String> {
      public ProcessBlazeRequest() {
        super("ProcessBlazeRequest");
      }

      public ProcessBlazeRequest_args getEmptyArgsInstance() {
        return new ProcessBlazeRequest_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ProcessBlazeRequest_result result = new ProcessBlazeRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ProcessBlazeRequest_result result = new ProcessBlazeRequest_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ProcessBlazeRequest_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ProcessBlazeRequest(args.token, args.command_name, args.args_json,resultHandler);
      }
    }

    public static class SetMinecraftAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetMinecraftAccount_args, Void> {
      public SetMinecraftAccount() {
        super("SetMinecraftAccount");
      }

      public SetMinecraftAccount_args getEmptyArgsInstance() {
        return new SetMinecraftAccount_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetMinecraftAccount_result result = new SetMinecraftAccount_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SetMinecraftAccount_result result = new SetMinecraftAccount_result();
            if (e instanceof OperationFailure) {
                        result.operation_failure = (OperationFailure) e;
                        result.setOperation_failureIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetMinecraftAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SetMinecraftAccount(args.token, args.minecraft_account,resultHandler);
      }
    }

  }

  public static class ProcessBlazeRequest_args implements org.apache.thrift.TBase<ProcessBlazeRequest_args, ProcessBlazeRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessBlazeRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessBlazeRequest_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("command_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ARGS_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("args_json", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessBlazeRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessBlazeRequest_argsTupleSchemeFactory());
    }

    public com.thilenius.sentinel.proto.Token token; // required
    public String command_name; // required
    public List<String> args_json; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      COMMAND_NAME((short)2, "command_name"),
      ARGS_JSON((short)3, "args_json");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // COMMAND_NAME
            return COMMAND_NAME;
          case 3: // ARGS_JSON
            return ARGS_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thilenius.sentinel.proto.Token.class)));
      tmpMap.put(_Fields.COMMAND_NAME, new org.apache.thrift.meta_data.FieldMetaData("command_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGS_JSON, new org.apache.thrift.meta_data.FieldMetaData("args_json", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessBlazeRequest_args.class, metaDataMap);
    }

    public ProcessBlazeRequest_args() {
    }

    public ProcessBlazeRequest_args(
      com.thilenius.sentinel.proto.Token token,
      String command_name,
      List<String> args_json)
    {
      this();
      this.token = token;
      this.command_name = command_name;
      this.args_json = args_json;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessBlazeRequest_args(ProcessBlazeRequest_args other) {
      if (other.isSetToken()) {
        this.token = new com.thilenius.sentinel.proto.Token(other.token);
      }
      if (other.isSetCommand_name()) {
        this.command_name = other.command_name;
      }
      if (other.isSetArgs_json()) {
        List<String> __this__args_json = new ArrayList<String>(other.args_json);
        this.args_json = __this__args_json;
      }
    }

    public ProcessBlazeRequest_args deepCopy() {
      return new ProcessBlazeRequest_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.command_name = null;
      this.args_json = null;
    }

    public com.thilenius.sentinel.proto.Token getToken() {
      return this.token;
    }

    public ProcessBlazeRequest_args setToken(com.thilenius.sentinel.proto.Token token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getCommand_name() {
      return this.command_name;
    }

    public ProcessBlazeRequest_args setCommand_name(String command_name) {
      this.command_name = command_name;
      return this;
    }

    public void unsetCommand_name() {
      this.command_name = null;
    }

    /** Returns true if field command_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand_name() {
      return this.command_name != null;
    }

    public void setCommand_nameIsSet(boolean value) {
      if (!value) {
        this.command_name = null;
      }
    }

    public int getArgs_jsonSize() {
      return (this.args_json == null) ? 0 : this.args_json.size();
    }

    public java.util.Iterator<String> getArgs_jsonIterator() {
      return (this.args_json == null) ? null : this.args_json.iterator();
    }

    public void addToArgs_json(String elem) {
      if (this.args_json == null) {
        this.args_json = new ArrayList<String>();
      }
      this.args_json.add(elem);
    }

    public List<String> getArgs_json() {
      return this.args_json;
    }

    public ProcessBlazeRequest_args setArgs_json(List<String> args_json) {
      this.args_json = args_json;
      return this;
    }

    public void unsetArgs_json() {
      this.args_json = null;
    }

    /** Returns true if field args_json is set (has been assigned a value) and false otherwise */
    public boolean isSetArgs_json() {
      return this.args_json != null;
    }

    public void setArgs_jsonIsSet(boolean value) {
      if (!value) {
        this.args_json = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((com.thilenius.sentinel.proto.Token)value);
        }
        break;

      case COMMAND_NAME:
        if (value == null) {
          unsetCommand_name();
        } else {
          setCommand_name((String)value);
        }
        break;

      case ARGS_JSON:
        if (value == null) {
          unsetArgs_json();
        } else {
          setArgs_json((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case COMMAND_NAME:
        return getCommand_name();

      case ARGS_JSON:
        return getArgs_json();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case COMMAND_NAME:
        return isSetCommand_name();
      case ARGS_JSON:
        return isSetArgs_json();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessBlazeRequest_args)
        return this.equals((ProcessBlazeRequest_args)that);
      return false;
    }

    public boolean equals(ProcessBlazeRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_command_name = true && this.isSetCommand_name();
      boolean that_present_command_name = true && that.isSetCommand_name();
      if (this_present_command_name || that_present_command_name) {
        if (!(this_present_command_name && that_present_command_name))
          return false;
        if (!this.command_name.equals(that.command_name))
          return false;
      }

      boolean this_present_args_json = true && this.isSetArgs_json();
      boolean that_present_args_json = true && that.isSetArgs_json();
      if (this_present_args_json || that_present_args_json) {
        if (!(this_present_args_json && that_present_args_json))
          return false;
        if (!this.args_json.equals(that.args_json))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_command_name = true && (isSetCommand_name());
      list.add(present_command_name);
      if (present_command_name)
        list.add(command_name);

      boolean present_args_json = true && (isSetArgs_json());
      list.add(present_args_json);
      if (present_args_json)
        list.add(args_json);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessBlazeRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommand_name()).compareTo(other.isSetCommand_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command_name, other.command_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgs_json()).compareTo(other.isSetArgs_json());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgs_json()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.args_json, other.args_json);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessBlazeRequest_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("command_name:");
      if (this.command_name == null) {
        sb.append("null");
      } else {
        sb.append(this.command_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("args_json:");
      if (this.args_json == null) {
        sb.append("null");
      } else {
        sb.append(this.args_json);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessBlazeRequest_argsStandardSchemeFactory implements SchemeFactory {
      public ProcessBlazeRequest_argsStandardScheme getScheme() {
        return new ProcessBlazeRequest_argsStandardScheme();
      }
    }

    private static class ProcessBlazeRequest_argsStandardScheme extends StandardScheme<ProcessBlazeRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessBlazeRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new com.thilenius.sentinel.proto.Token();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command_name = iprot.readString();
                struct.setCommand_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARGS_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.args_json = new ArrayList<String>(_list8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.args_json.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setArgs_jsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessBlazeRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.command_name != null) {
          oprot.writeFieldBegin(COMMAND_NAME_FIELD_DESC);
          oprot.writeString(struct.command_name);
          oprot.writeFieldEnd();
        }
        if (struct.args_json != null) {
          oprot.writeFieldBegin(ARGS_JSON_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.args_json.size()));
            for (String _iter11 : struct.args_json)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessBlazeRequest_argsTupleSchemeFactory implements SchemeFactory {
      public ProcessBlazeRequest_argsTupleScheme getScheme() {
        return new ProcessBlazeRequest_argsTupleScheme();
      }
    }

    private static class ProcessBlazeRequest_argsTupleScheme extends TupleScheme<ProcessBlazeRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessBlazeRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetCommand_name()) {
          optionals.set(1);
        }
        if (struct.isSetArgs_json()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
        if (struct.isSetCommand_name()) {
          oprot.writeString(struct.command_name);
        }
        if (struct.isSetArgs_json()) {
          {
            oprot.writeI32(struct.args_json.size());
            for (String _iter12 : struct.args_json)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessBlazeRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.token = new com.thilenius.sentinel.proto.Token();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.command_name = iprot.readString();
          struct.setCommand_nameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.args_json = new ArrayList<String>(_list13.size);
            String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.args_json.add(_elem14);
            }
          }
          struct.setArgs_jsonIsSet(true);
        }
      }
    }

  }

  public static class ProcessBlazeRequest_result implements org.apache.thrift.TBase<ProcessBlazeRequest_result, ProcessBlazeRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessBlazeRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessBlazeRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ProcessBlazeRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ProcessBlazeRequest_resultTupleSchemeFactory());
    }

    public String success; // required
    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessBlazeRequest_result.class, metaDataMap);
    }

    public ProcessBlazeRequest_result() {
    }

    public ProcessBlazeRequest_result(
      String success,
      OperationFailure operation_failure)
    {
      this();
      this.success = success;
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ProcessBlazeRequest_result(ProcessBlazeRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public ProcessBlazeRequest_result deepCopy() {
      return new ProcessBlazeRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.operation_failure = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ProcessBlazeRequest_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public ProcessBlazeRequest_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ProcessBlazeRequest_result)
        return this.equals((ProcessBlazeRequest_result)that);
      return false;
    }

    public boolean equals(ProcessBlazeRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(ProcessBlazeRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ProcessBlazeRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ProcessBlazeRequest_resultStandardSchemeFactory implements SchemeFactory {
      public ProcessBlazeRequest_resultStandardScheme getScheme() {
        return new ProcessBlazeRequest_resultStandardScheme();
      }
    }

    private static class ProcessBlazeRequest_resultStandardScheme extends StandardScheme<ProcessBlazeRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessBlazeRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessBlazeRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ProcessBlazeRequest_resultTupleSchemeFactory implements SchemeFactory {
      public ProcessBlazeRequest_resultTupleScheme getScheme() {
        return new ProcessBlazeRequest_resultTupleScheme();
      }
    }

    private static class ProcessBlazeRequest_resultTupleScheme extends TupleScheme<ProcessBlazeRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ProcessBlazeRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOperation_failure()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ProcessBlazeRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

  public static class SetMinecraftAccount_args implements org.apache.thrift.TBase<SetMinecraftAccount_args, SetMinecraftAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetMinecraftAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetMinecraftAccount_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MINECRAFT_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minecraft_account", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetMinecraftAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetMinecraftAccount_argsTupleSchemeFactory());
    }

    public com.thilenius.sentinel.proto.Token token; // required
    public MinecraftAccount minecraft_account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      MINECRAFT_ACCOUNT((short)2, "minecraft_account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // MINECRAFT_ACCOUNT
            return MINECRAFT_ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.thilenius.sentinel.proto.Token.class)));
      tmpMap.put(_Fields.MINECRAFT_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("minecraft_account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MinecraftAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetMinecraftAccount_args.class, metaDataMap);
    }

    public SetMinecraftAccount_args() {
    }

    public SetMinecraftAccount_args(
      com.thilenius.sentinel.proto.Token token,
      MinecraftAccount minecraft_account)
    {
      this();
      this.token = token;
      this.minecraft_account = minecraft_account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetMinecraftAccount_args(SetMinecraftAccount_args other) {
      if (other.isSetToken()) {
        this.token = new com.thilenius.sentinel.proto.Token(other.token);
      }
      if (other.isSetMinecraft_account()) {
        this.minecraft_account = new MinecraftAccount(other.minecraft_account);
      }
    }

    public SetMinecraftAccount_args deepCopy() {
      return new SetMinecraftAccount_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.minecraft_account = null;
    }

    public com.thilenius.sentinel.proto.Token getToken() {
      return this.token;
    }

    public SetMinecraftAccount_args setToken(com.thilenius.sentinel.proto.Token token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public MinecraftAccount getMinecraft_account() {
      return this.minecraft_account;
    }

    public SetMinecraftAccount_args setMinecraft_account(MinecraftAccount minecraft_account) {
      this.minecraft_account = minecraft_account;
      return this;
    }

    public void unsetMinecraft_account() {
      this.minecraft_account = null;
    }

    /** Returns true if field minecraft_account is set (has been assigned a value) and false otherwise */
    public boolean isSetMinecraft_account() {
      return this.minecraft_account != null;
    }

    public void setMinecraft_accountIsSet(boolean value) {
      if (!value) {
        this.minecraft_account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((com.thilenius.sentinel.proto.Token)value);
        }
        break;

      case MINECRAFT_ACCOUNT:
        if (value == null) {
          unsetMinecraft_account();
        } else {
          setMinecraft_account((MinecraftAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case MINECRAFT_ACCOUNT:
        return getMinecraft_account();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case MINECRAFT_ACCOUNT:
        return isSetMinecraft_account();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetMinecraftAccount_args)
        return this.equals((SetMinecraftAccount_args)that);
      return false;
    }

    public boolean equals(SetMinecraftAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_minecraft_account = true && this.isSetMinecraft_account();
      boolean that_present_minecraft_account = true && that.isSetMinecraft_account();
      if (this_present_minecraft_account || that_present_minecraft_account) {
        if (!(this_present_minecraft_account && that_present_minecraft_account))
          return false;
        if (!this.minecraft_account.equals(that.minecraft_account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_minecraft_account = true && (isSetMinecraft_account());
      list.add(present_minecraft_account);
      if (present_minecraft_account)
        list.add(minecraft_account);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetMinecraftAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinecraft_account()).compareTo(other.isSetMinecraft_account());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinecraft_account()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minecraft_account, other.minecraft_account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetMinecraftAccount_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minecraft_account:");
      if (this.minecraft_account == null) {
        sb.append("null");
      } else {
        sb.append(this.minecraft_account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
      if (minecraft_account != null) {
        minecraft_account.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetMinecraftAccount_argsStandardSchemeFactory implements SchemeFactory {
      public SetMinecraftAccount_argsStandardScheme getScheme() {
        return new SetMinecraftAccount_argsStandardScheme();
      }
    }

    private static class SetMinecraftAccount_argsStandardScheme extends StandardScheme<SetMinecraftAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetMinecraftAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new com.thilenius.sentinel.proto.Token();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MINECRAFT_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.minecraft_account = new MinecraftAccount();
                struct.minecraft_account.read(iprot);
                struct.setMinecraft_accountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetMinecraftAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.minecraft_account != null) {
          oprot.writeFieldBegin(MINECRAFT_ACCOUNT_FIELD_DESC);
          struct.minecraft_account.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetMinecraftAccount_argsTupleSchemeFactory implements SchemeFactory {
      public SetMinecraftAccount_argsTupleScheme getScheme() {
        return new SetMinecraftAccount_argsTupleScheme();
      }
    }

    private static class SetMinecraftAccount_argsTupleScheme extends TupleScheme<SetMinecraftAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetMinecraftAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetMinecraft_account()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
        if (struct.isSetMinecraft_account()) {
          struct.minecraft_account.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetMinecraftAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = new com.thilenius.sentinel.proto.Token();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minecraft_account = new MinecraftAccount();
          struct.minecraft_account.read(iprot);
          struct.setMinecraft_accountIsSet(true);
        }
      }
    }

  }

  public static class SetMinecraftAccount_result implements org.apache.thrift.TBase<SetMinecraftAccount_result, SetMinecraftAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetMinecraftAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetMinecraftAccount_result");

    private static final org.apache.thrift.protocol.TField OPERATION_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_failure", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetMinecraftAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetMinecraftAccount_resultTupleSchemeFactory());
    }

    public OperationFailure operation_failure; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATION_FAILURE((short)1, "operation_failure");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATION_FAILURE
            return OPERATION_FAILURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATION_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("operation_failure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetMinecraftAccount_result.class, metaDataMap);
    }

    public SetMinecraftAccount_result() {
    }

    public SetMinecraftAccount_result(
      OperationFailure operation_failure)
    {
      this();
      this.operation_failure = operation_failure;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetMinecraftAccount_result(SetMinecraftAccount_result other) {
      if (other.isSetOperation_failure()) {
        this.operation_failure = new OperationFailure(other.operation_failure);
      }
    }

    public SetMinecraftAccount_result deepCopy() {
      return new SetMinecraftAccount_result(this);
    }

    @Override
    public void clear() {
      this.operation_failure = null;
    }

    public OperationFailure getOperation_failure() {
      return this.operation_failure;
    }

    public SetMinecraftAccount_result setOperation_failure(OperationFailure operation_failure) {
      this.operation_failure = operation_failure;
      return this;
    }

    public void unsetOperation_failure() {
      this.operation_failure = null;
    }

    /** Returns true if field operation_failure is set (has been assigned a value) and false otherwise */
    public boolean isSetOperation_failure() {
      return this.operation_failure != null;
    }

    public void setOperation_failureIsSet(boolean value) {
      if (!value) {
        this.operation_failure = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPERATION_FAILURE:
        if (value == null) {
          unsetOperation_failure();
        } else {
          setOperation_failure((OperationFailure)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATION_FAILURE:
        return getOperation_failure();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPERATION_FAILURE:
        return isSetOperation_failure();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetMinecraftAccount_result)
        return this.equals((SetMinecraftAccount_result)that);
      return false;
    }

    public boolean equals(SetMinecraftAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_operation_failure = true && this.isSetOperation_failure();
      boolean that_present_operation_failure = true && that.isSetOperation_failure();
      if (this_present_operation_failure || that_present_operation_failure) {
        if (!(this_present_operation_failure && that_present_operation_failure))
          return false;
        if (!this.operation_failure.equals(that.operation_failure))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_operation_failure = true && (isSetOperation_failure());
      list.add(present_operation_failure);
      if (present_operation_failure)
        list.add(operation_failure);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetMinecraftAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOperation_failure()).compareTo(other.isSetOperation_failure());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperation_failure()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_failure, other.operation_failure);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetMinecraftAccount_result(");
      boolean first = true;

      sb.append("operation_failure:");
      if (this.operation_failure == null) {
        sb.append("null");
      } else {
        sb.append(this.operation_failure);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetMinecraftAccount_resultStandardSchemeFactory implements SchemeFactory {
      public SetMinecraftAccount_resultStandardScheme getScheme() {
        return new SetMinecraftAccount_resultStandardScheme();
      }
    }

    private static class SetMinecraftAccount_resultStandardScheme extends StandardScheme<SetMinecraftAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetMinecraftAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATION_FAILURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operation_failure = new OperationFailure();
                struct.operation_failure.read(iprot);
                struct.setOperation_failureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetMinecraftAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operation_failure != null) {
          oprot.writeFieldBegin(OPERATION_FAILURE_FIELD_DESC);
          struct.operation_failure.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetMinecraftAccount_resultTupleSchemeFactory implements SchemeFactory {
      public SetMinecraftAccount_resultTupleScheme getScheme() {
        return new SetMinecraftAccount_resultTupleScheme();
      }
    }

    private static class SetMinecraftAccount_resultTupleScheme extends TupleScheme<SetMinecraftAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetMinecraftAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOperation_failure()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOperation_failure()) {
          struct.operation_failure.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetMinecraftAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.operation_failure = new OperationFailure();
          struct.operation_failure.read(iprot);
          struct.setOperation_failureIsSet(true);
        }
      }
    }

  }

}
