#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import sentinel.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MinecraftAccount:
  """
  Attributes:
   - user_uuid
   - minecraft_username
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_uuid', None, None, ), # 1
    (2, TType.STRING, 'minecraft_username', None, None, ), # 2
  )

  def __init__(self, user_uuid=None, minecraft_username=None,):
    self.user_uuid = user_uuid
    self.minecraft_username = minecraft_username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.minecraft_username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MinecraftAccount')
    if self.user_uuid is not None:
      oprot.writeFieldBegin('user_uuid', TType.STRING, 1)
      oprot.writeString(self.user_uuid)
      oprot.writeFieldEnd()
    if self.minecraft_username is not None:
      oprot.writeFieldBegin('minecraft_username', TType.STRING, 2)
      oprot.writeString(self.minecraft_username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_uuid)
    value = (value * 31) ^ hash(self.minecraft_username)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BlazeRequestWrapper:
  """
  Attributes:
   - user_uuid
   - minecraft_username
   - command_name
   - args_json
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_uuid', None, None, ), # 1
    (2, TType.STRING, 'minecraft_username', None, None, ), # 2
    (3, TType.STRING, 'command_name', None, None, ), # 3
    (4, TType.LIST, 'args_json', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, user_uuid=None, minecraft_username=None, command_name=None, args_json=None,):
    self.user_uuid = user_uuid
    self.minecraft_username = minecraft_username
    self.command_name = command_name
    self.args_json = args_json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.minecraft_username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.command_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.args_json = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.args_json.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlazeRequestWrapper')
    if self.user_uuid is not None:
      oprot.writeFieldBegin('user_uuid', TType.STRING, 1)
      oprot.writeString(self.user_uuid)
      oprot.writeFieldEnd()
    if self.minecraft_username is not None:
      oprot.writeFieldBegin('minecraft_username', TType.STRING, 2)
      oprot.writeString(self.minecraft_username)
      oprot.writeFieldEnd()
    if self.command_name is not None:
      oprot.writeFieldBegin('command_name', TType.STRING, 3)
      oprot.writeString(self.command_name)
      oprot.writeFieldEnd()
    if self.args_json is not None:
      oprot.writeFieldBegin('args_json', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.args_json))
      for iter6 in self.args_json:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_uuid)
    value = (value * 31) ^ hash(self.minecraft_username)
    value = (value * 31) ^ hash(self.command_name)
    value = (value * 31) ^ hash(self.args_json)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BlazeResponseWrapper:
  """
  Attributes:
   - is_exception
   - json
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_exception', None, None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
  )

  def __init__(self, is_exception=None, json=None,):
    self.is_exception = is_exception
    self.json = json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_exception = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlazeResponseWrapper')
    if self.is_exception is not None:
      oprot.writeFieldBegin('is_exception', TType.BOOL, 1)
      oprot.writeBool(self.is_exception)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.is_exception)
    value = (value * 31) ^ hash(self.json)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OperationFailure(TException):
  """
  Attributes:
   - user_message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_message', None, None, ), # 1
  )

  def __init__(self, user_message=None,):
    self.user_message = user_message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OperationFailure')
    if self.user_message is not None:
      oprot.writeFieldBegin('user_message', TType.STRING, 1)
      oprot.writeString(self.user_message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
