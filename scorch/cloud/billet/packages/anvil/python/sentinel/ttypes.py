#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class User:
  """
  Attributes:
   - uuid
   - first_name
   - last_name
   - email_address
   - permission_level
   - student_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'first_name', None, None, ), # 2
    (3, TType.STRING, 'last_name', None, None, ), # 3
    (4, TType.STRING, 'email_address', None, None, ), # 4
    (5, TType.I32, 'permission_level', None, None, ), # 5
    (6, TType.STRING, 'student_id', None, None, ), # 6
  )

  def __init__(self, uuid=None, first_name=None, last_name=None, email_address=None, permission_level=None, student_id=None,):
    self.uuid = uuid
    self.first_name = first_name
    self.last_name = last_name
    self.email_address = email_address
    self.permission_level = permission_level
    self.student_id = student_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.first_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.last_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.permission_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.student_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.first_name is not None:
      oprot.writeFieldBegin('first_name', TType.STRING, 2)
      oprot.writeString(self.first_name)
      oprot.writeFieldEnd()
    if self.last_name is not None:
      oprot.writeFieldBegin('last_name', TType.STRING, 3)
      oprot.writeString(self.last_name)
      oprot.writeFieldEnd()
    if self.email_address is not None:
      oprot.writeFieldBegin('email_address', TType.STRING, 4)
      oprot.writeString(self.email_address)
      oprot.writeFieldEnd()
    if self.permission_level is not None:
      oprot.writeFieldBegin('permission_level', TType.I32, 5)
      oprot.writeI32(self.permission_level)
      oprot.writeFieldEnd()
    if self.student_id is not None:
      oprot.writeFieldBegin('student_id', TType.STRING, 6)
      oprot.writeString(self.student_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.first_name)
    value = (value * 31) ^ hash(self.last_name)
    value = (value * 31) ^ hash(self.email_address)
    value = (value * 31) ^ hash(self.permission_level)
    value = (value * 31) ^ hash(self.student_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Token:
  """
  Attributes:
   - user_uuid
   - token_uuid
   - permission_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_uuid', None, None, ), # 1
    (2, TType.STRING, 'token_uuid', None, None, ), # 2
    (3, TType.I32, 'permission_level', None, None, ), # 3
  )

  def __init__(self, user_uuid=None, token_uuid=None, permission_level=None,):
    self.user_uuid = user_uuid
    self.token_uuid = token_uuid
    self.permission_level = permission_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.token_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.permission_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Token')
    if self.user_uuid is not None:
      oprot.writeFieldBegin('user_uuid', TType.STRING, 1)
      oprot.writeString(self.user_uuid)
      oprot.writeFieldEnd()
    if self.token_uuid is not None:
      oprot.writeFieldBegin('token_uuid', TType.STRING, 2)
      oprot.writeString(self.token_uuid)
      oprot.writeFieldEnd()
    if self.permission_level is not None:
      oprot.writeFieldBegin('permission_level', TType.I32, 3)
      oprot.writeI32(self.permission_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_uuid)
    value = (value * 31) ^ hash(self.token_uuid)
    value = (value * 31) ^ hash(self.permission_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OperationFailure(TException):
  """
  Attributes:
   - user_message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_message', None, None, ), # 1
  )

  def __init__(self, user_message=None,):
    self.user_message = user_message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OperationFailure')
    if self.user_message is not None:
      oprot.writeFieldBegin('user_message', TType.STRING, 1)
      oprot.writeString(self.user_message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
