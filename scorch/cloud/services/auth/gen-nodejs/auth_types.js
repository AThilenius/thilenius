//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
StdReturn = module.exports.StdReturn = function(args) {
  this.did_pass = null;
  this.failure_message = null;
  this.error_code = null;
  this.stack_trace = null;
  if (args) {
    if (args.did_pass !== undefined) {
      this.did_pass = args.did_pass;
    }
    if (args.failure_message !== undefined) {
      this.failure_message = args.failure_message;
    }
    if (args.error_code !== undefined) {
      this.error_code = args.error_code;
    }
    if (args.stack_trace !== undefined) {
      this.stack_trace = args.stack_trace;
    }
  }
};
StdReturn.prototype = {};
StdReturn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.did_pass = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.failure_message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stack_trace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StdReturn.prototype.write = function(output) {
  output.writeStructBegin('StdReturn');
  if (this.did_pass !== null && this.did_pass !== undefined) {
    output.writeFieldBegin('did_pass', Thrift.Type.BOOL, 1);
    output.writeBool(this.did_pass);
    output.writeFieldEnd();
  }
  if (this.failure_message !== null && this.failure_message !== undefined) {
    output.writeFieldBegin('failure_message', Thrift.Type.STRING, 2);
    output.writeString(this.failure_message);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 3);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  if (this.stack_trace !== null && this.stack_trace !== undefined) {
    output.writeFieldBegin('stack_trace', Thrift.Type.STRING, 4);
    output.writeString(this.stack_trace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

