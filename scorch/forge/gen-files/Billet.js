//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Billet_SyncAndExec_args = function(args) {
  this.token = null;
  this.repo_header = null;
  this.shell_command = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.repo_header !== undefined) {
      this.repo_header = args.repo_header;
    }
    if (args.shell_command !== undefined) {
      this.shell_command = args.shell_command;
    }
  }
};
Billet_SyncAndExec_args.prototype = {};
Billet_SyncAndExec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo_header = new RepoHeader();
        this.repo_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shell_command = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_SyncAndExec_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_SyncAndExec_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_header !== null && this.repo_header !== undefined) {
    output.writeFieldBegin('repo_header', Thrift.Type.STRUCT, 2);
    this.repo_header.write(output);
    output.writeFieldEnd();
  }
  if (this.shell_command !== null && this.shell_command !== undefined) {
    output.writeFieldBegin('shell_command', Thrift.Type.STRING, 3);
    output.writeString(this.shell_command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_SyncAndExec_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_SyncAndExec_result.prototype = {};
Billet_SyncAndExec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Cord();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_SyncAndExec_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_SyncAndExec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_TerminateSession_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
Billet_TerminateSession_args.prototype = {};
Billet_TerminateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_TerminateSession_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_TerminateSession_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_TerminateSession_result = function(args) {
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_TerminateSession_result.prototype = {};
Billet_TerminateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_TerminateSession_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_TerminateSession_result');
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_GetSessionStatus_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
Billet_GetSessionStatus_args.prototype = {};
Billet_GetSessionStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_GetSessionStatus_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_GetSessionStatus_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_GetSessionStatus_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_GetSessionStatus_result.prototype = {};
Billet_GetSessionStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SessionStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_GetSessionStatus_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_GetSessionStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_ClangFormat_args = function(args) {
  this.source = null;
  if (args) {
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
Billet_ClangFormat_args.prototype = {};
Billet_ClangFormat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_ClangFormat_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_ClangFormat_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_ClangFormat_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_ClangFormat_result.prototype = {};
Billet_ClangFormat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_ClangFormat_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_ClangFormat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BilletClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BilletClient.prototype = {};
BilletClient.prototype.SyncAndExec = function(token, repo_header, shell_command, callback) {
  if (callback === undefined) {
    this.send_SyncAndExec(token, repo_header, shell_command);
    return this.recv_SyncAndExec();
  } else {
    var postData = this.send_SyncAndExec(token, repo_header, shell_command, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_SyncAndExec);
  }
};

BilletClient.prototype.send_SyncAndExec = function(token, repo_header, shell_command, callback) {
  this.output.writeMessageBegin('SyncAndExec', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_SyncAndExec_args();
  args.token = token;
  args.repo_header = repo_header;
  args.shell_command = shell_command;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_SyncAndExec = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_SyncAndExec_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'SyncAndExec failed: unknown result';
};
BilletClient.prototype.TerminateSession = function(token, callback) {
  if (callback === undefined) {
    this.send_TerminateSession(token);
    this.recv_TerminateSession();
  } else {
    var postData = this.send_TerminateSession(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_TerminateSession);
  }
};

BilletClient.prototype.send_TerminateSession = function(token, callback) {
  this.output.writeMessageBegin('TerminateSession', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_TerminateSession_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_TerminateSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_TerminateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  return;
};
BilletClient.prototype.GetSessionStatus = function(token, callback) {
  if (callback === undefined) {
    this.send_GetSessionStatus(token);
    return this.recv_GetSessionStatus();
  } else {
    var postData = this.send_GetSessionStatus(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetSessionStatus);
  }
};

BilletClient.prototype.send_GetSessionStatus = function(token, callback) {
  this.output.writeMessageBegin('GetSessionStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_GetSessionStatus_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_GetSessionStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_GetSessionStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetSessionStatus failed: unknown result';
};
BilletClient.prototype.ClangFormat = function(source, callback) {
  if (callback === undefined) {
    this.send_ClangFormat(source);
    return this.recv_ClangFormat();
  } else {
    var postData = this.send_ClangFormat(source, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ClangFormat);
  }
};

BilletClient.prototype.send_ClangFormat = function(source, callback) {
  this.output.writeMessageBegin('ClangFormat', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_ClangFormat_args();
  args.source = source;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_ClangFormat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_ClangFormat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ClangFormat failed: unknown result';
};
