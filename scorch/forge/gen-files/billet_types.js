//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SessionStatus = function(args) {
  this.is_running = null;
  this.current_or_last_cord = null;
  if (args) {
    if (args.is_running !== undefined) {
      this.is_running = args.is_running;
    }
    if (args.current_or_last_cord !== undefined) {
      this.current_or_last_cord = args.current_or_last_cord;
    }
  }
};
SessionStatus.prototype = {};
SessionStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_running = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.current_or_last_cord = new Cord();
        this.current_or_last_cord.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionStatus.prototype.write = function(output) {
  output.writeStructBegin('SessionStatus');
  if (this.is_running !== null && this.is_running !== undefined) {
    output.writeFieldBegin('is_running', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_running);
    output.writeFieldEnd();
  }
  if (this.current_or_last_cord !== null && this.current_or_last_cord !== undefined) {
    output.writeFieldBegin('current_or_last_cord', Thrift.Type.STRUCT, 2);
    this.current_or_last_cord.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SessionBusy = function(args) {
  this.session_busy = true;
  if (args) {
    if (args.session_busy !== undefined) {
      this.session_busy = args.session_busy;
    }
  }
};
Thrift.inherits(SessionBusy, Thrift.TException);
SessionBusy.prototype.name = 'SessionBusy';
SessionBusy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.session_busy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionBusy.prototype.write = function(output) {
  output.writeStructBegin('SessionBusy');
  if (this.session_busy !== null && this.session_busy !== undefined) {
    output.writeFieldBegin('session_busy', Thrift.Type.BOOL, 1);
    output.writeBool(this.session_busy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperationFailure = function(args) {
  this.user_message = null;
  if (args) {
    if (args.user_message !== undefined) {
      this.user_message = args.user_message;
    }
  }
};
Thrift.inherits(OperationFailure, Thrift.TException);
OperationFailure.prototype.name = 'OperationFailure';
OperationFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationFailure.prototype.write = function(output) {
  output.writeStructBegin('OperationFailure');
  if (this.user_message !== null && this.user_message !== undefined) {
    output.writeFieldBegin('user_message', Thrift.Type.STRING, 1);
    output.writeString(this.user_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

