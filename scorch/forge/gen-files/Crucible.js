//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Crucible_CreateBaseRepo_args = function(args) {
  this.user_stoken = null;
  this.repo_name = null;
  if (args) {
    if (args.user_stoken !== undefined) {
      this.user_stoken = args.user_stoken;
    }
    if (args.repo_name !== undefined) {
      this.repo_name = args.repo_name;
    }
  }
};
Crucible_CreateBaseRepo_args.prototype = {};
Crucible_CreateBaseRepo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_stoken = new Token();
        this.user_stoken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CreateBaseRepo_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CreateBaseRepo_args');
  if (this.user_stoken !== null && this.user_stoken !== undefined) {
    output.writeFieldBegin('user_stoken', Thrift.Type.STRUCT, 1);
    this.user_stoken.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_name !== null && this.repo_name !== undefined) {
    output.writeFieldBegin('repo_name', Thrift.Type.STRING, 2);
    output.writeString(this.repo_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_CreateBaseRepo_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_CreateBaseRepo_result.prototype = {};
Crucible_CreateBaseRepo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Repo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CreateBaseRepo_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CreateBaseRepo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_CreateForkedRepo_args = function(args) {
  this.user_stoken = null;
  this.base_repo_name = null;
  if (args) {
    if (args.user_stoken !== undefined) {
      this.user_stoken = args.user_stoken;
    }
    if (args.base_repo_name !== undefined) {
      this.base_repo_name = args.base_repo_name;
    }
  }
};
Crucible_CreateForkedRepo_args.prototype = {};
Crucible_CreateForkedRepo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_stoken = new Token();
        this.user_stoken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base_repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CreateForkedRepo_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CreateForkedRepo_args');
  if (this.user_stoken !== null && this.user_stoken !== undefined) {
    output.writeFieldBegin('user_stoken', Thrift.Type.STRUCT, 1);
    this.user_stoken.write(output);
    output.writeFieldEnd();
  }
  if (this.base_repo_name !== null && this.base_repo_name !== undefined) {
    output.writeFieldBegin('base_repo_name', Thrift.Type.STRING, 2);
    output.writeString(this.base_repo_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_CreateForkedRepo_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_CreateForkedRepo_result.prototype = {};
Crucible_CreateForkedRepo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Repo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CreateForkedRepo_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CreateForkedRepo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoHeadersByUser_args = function(args) {
  this.user_stoken = null;
  if (args) {
    if (args.user_stoken !== undefined) {
      this.user_stoken = args.user_stoken;
    }
  }
};
Crucible_GetRepoHeadersByUser_args.prototype = {};
Crucible_GetRepoHeadersByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_stoken = new Token();
        this.user_stoken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoHeadersByUser_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoHeadersByUser_args');
  if (this.user_stoken !== null && this.user_stoken !== undefined) {
    output.writeFieldBegin('user_stoken', Thrift.Type.STRUCT, 1);
    this.user_stoken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoHeadersByUser_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_GetRepoHeadersByUser_result.prototype = {};
Crucible_GetRepoHeadersByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new RepoHeader();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoHeadersByUser_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoHeadersByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoById_args = function(args) {
  this.repo_uuid = null;
  if (args) {
    if (args.repo_uuid !== undefined) {
      this.repo_uuid = args.repo_uuid;
    }
  }
};
Crucible_GetRepoById_args.prototype = {};
Crucible_GetRepoById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repo_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoById_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoById_args');
  if (this.repo_uuid !== null && this.repo_uuid !== undefined) {
    output.writeFieldBegin('repo_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.repo_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoById_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_GetRepoById_result.prototype = {};
Crucible_GetRepoById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Repo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoById_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoHeaderById_args = function(args) {
  this.user_stoken = null;
  this.repo_uuid = null;
  if (args) {
    if (args.user_stoken !== undefined) {
      this.user_stoken = args.user_stoken;
    }
    if (args.repo_uuid !== undefined) {
      this.repo_uuid = args.repo_uuid;
    }
  }
};
Crucible_GetRepoHeaderById_args.prototype = {};
Crucible_GetRepoHeaderById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_stoken = new Token();
        this.user_stoken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoHeaderById_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoHeaderById_args');
  if (this.user_stoken !== null && this.user_stoken !== undefined) {
    output.writeFieldBegin('user_stoken', Thrift.Type.STRUCT, 1);
    this.user_stoken.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_uuid !== null && this.repo_uuid !== undefined) {
    output.writeFieldBegin('repo_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.repo_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_GetRepoHeaderById_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_GetRepoHeaderById_result.prototype = {};
Crucible_GetRepoHeaderById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RepoHeader();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_GetRepoHeaderById_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_GetRepoHeaderById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_CommitAndDownstream_args = function(args) {
  this.user_stoken = null;
  this.repo_header = null;
  this.change_list = null;
  if (args) {
    if (args.user_stoken !== undefined) {
      this.user_stoken = args.user_stoken;
    }
    if (args.repo_header !== undefined) {
      this.repo_header = args.repo_header;
    }
    if (args.change_list !== undefined) {
      this.change_list = args.change_list;
    }
  }
};
Crucible_CommitAndDownstream_args.prototype = {};
Crucible_CommitAndDownstream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_stoken = new Token();
        this.user_stoken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo_header = new RepoHeader();
        this.repo_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.change_list = new ChangeList();
        this.change_list.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CommitAndDownstream_args.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CommitAndDownstream_args');
  if (this.user_stoken !== null && this.user_stoken !== undefined) {
    output.writeFieldBegin('user_stoken', Thrift.Type.STRUCT, 1);
    this.user_stoken.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_header !== null && this.repo_header !== undefined) {
    output.writeFieldBegin('repo_header', Thrift.Type.STRUCT, 2);
    this.repo_header.write(output);
    output.writeFieldEnd();
  }
  if (this.change_list !== null && this.change_list !== undefined) {
    output.writeFieldBegin('change_list', Thrift.Type.STRUCT, 3);
    this.change_list.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crucible_CommitAndDownstream_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Crucible_CommitAndDownstream_result.prototype = {};
Crucible_CommitAndDownstream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ChangeList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crucible_CommitAndDownstream_result.prototype.write = function(output) {
  output.writeStructBegin('Crucible_CommitAndDownstream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrucibleClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CrucibleClient.prototype = {};
CrucibleClient.prototype.CreateBaseRepo = function(user_stoken, repo_name, callback) {
  if (callback === undefined) {
    this.send_CreateBaseRepo(user_stoken, repo_name);
    return this.recv_CreateBaseRepo();
  } else {
    var postData = this.send_CreateBaseRepo(user_stoken, repo_name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateBaseRepo);
  }
};

CrucibleClient.prototype.send_CreateBaseRepo = function(user_stoken, repo_name, callback) {
  this.output.writeMessageBegin('CreateBaseRepo', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_CreateBaseRepo_args();
  args.user_stoken = user_stoken;
  args.repo_name = repo_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_CreateBaseRepo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_CreateBaseRepo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateBaseRepo failed: unknown result';
};
CrucibleClient.prototype.CreateForkedRepo = function(user_stoken, base_repo_name, callback) {
  if (callback === undefined) {
    this.send_CreateForkedRepo(user_stoken, base_repo_name);
    return this.recv_CreateForkedRepo();
  } else {
    var postData = this.send_CreateForkedRepo(user_stoken, base_repo_name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateForkedRepo);
  }
};

CrucibleClient.prototype.send_CreateForkedRepo = function(user_stoken, base_repo_name, callback) {
  this.output.writeMessageBegin('CreateForkedRepo', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_CreateForkedRepo_args();
  args.user_stoken = user_stoken;
  args.base_repo_name = base_repo_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_CreateForkedRepo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_CreateForkedRepo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateForkedRepo failed: unknown result';
};
CrucibleClient.prototype.GetRepoHeadersByUser = function(user_stoken, callback) {
  if (callback === undefined) {
    this.send_GetRepoHeadersByUser(user_stoken);
    return this.recv_GetRepoHeadersByUser();
  } else {
    var postData = this.send_GetRepoHeadersByUser(user_stoken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetRepoHeadersByUser);
  }
};

CrucibleClient.prototype.send_GetRepoHeadersByUser = function(user_stoken, callback) {
  this.output.writeMessageBegin('GetRepoHeadersByUser', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_GetRepoHeadersByUser_args();
  args.user_stoken = user_stoken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_GetRepoHeadersByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_GetRepoHeadersByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRepoHeadersByUser failed: unknown result';
};
CrucibleClient.prototype.GetRepoById = function(repo_uuid, callback) {
  if (callback === undefined) {
    this.send_GetRepoById(repo_uuid);
    return this.recv_GetRepoById();
  } else {
    var postData = this.send_GetRepoById(repo_uuid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetRepoById);
  }
};

CrucibleClient.prototype.send_GetRepoById = function(repo_uuid, callback) {
  this.output.writeMessageBegin('GetRepoById', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_GetRepoById_args();
  args.repo_uuid = repo_uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_GetRepoById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_GetRepoById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRepoById failed: unknown result';
};
CrucibleClient.prototype.GetRepoHeaderById = function(user_stoken, repo_uuid, callback) {
  if (callback === undefined) {
    this.send_GetRepoHeaderById(user_stoken, repo_uuid);
    return this.recv_GetRepoHeaderById();
  } else {
    var postData = this.send_GetRepoHeaderById(user_stoken, repo_uuid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_GetRepoHeaderById);
  }
};

CrucibleClient.prototype.send_GetRepoHeaderById = function(user_stoken, repo_uuid, callback) {
  this.output.writeMessageBegin('GetRepoHeaderById', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_GetRepoHeaderById_args();
  args.user_stoken = user_stoken;
  args.repo_uuid = repo_uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_GetRepoHeaderById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_GetRepoHeaderById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRepoHeaderById failed: unknown result';
};
CrucibleClient.prototype.CommitAndDownstream = function(user_stoken, repo_header, change_list, callback) {
  if (callback === undefined) {
    this.send_CommitAndDownstream(user_stoken, repo_header, change_list);
    return this.recv_CommitAndDownstream();
  } else {
    var postData = this.send_CommitAndDownstream(user_stoken, repo_header, change_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CommitAndDownstream);
  }
};

CrucibleClient.prototype.send_CommitAndDownstream = function(user_stoken, repo_header, change_list, callback) {
  this.output.writeMessageBegin('CommitAndDownstream', Thrift.MessageType.CALL, this.seqid);
  var args = new Crucible_CommitAndDownstream_args();
  args.user_stoken = user_stoken;
  args.repo_header = repo_header;
  args.change_list = change_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CrucibleClient.prototype.recv_CommitAndDownstream = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Crucible_CommitAndDownstream_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CommitAndDownstream failed: unknown result';
};
