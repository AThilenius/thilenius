//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


FileInfo = function(args) {
  this.relative_path = null;
  this.is_locked = null;
  this.md5 = null;
  this.modify_timestamp = null;
  if (args) {
    if (args.relative_path !== undefined) {
      this.relative_path = args.relative_path;
    }
    if (args.is_locked !== undefined) {
      this.is_locked = args.is_locked;
    }
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.modify_timestamp !== undefined) {
      this.modify_timestamp = args.modify_timestamp;
    }
  }
};
FileInfo.prototype = {};
FileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.relative_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_locked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.modify_timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInfo.prototype.write = function(output) {
  output.writeStructBegin('FileInfo');
  if (this.relative_path !== null && this.relative_path !== undefined) {
    output.writeFieldBegin('relative_path', Thrift.Type.STRING, 1);
    output.writeString(this.relative_path);
    output.writeFieldEnd();
  }
  if (this.is_locked !== null && this.is_locked !== undefined) {
    output.writeFieldBegin('is_locked', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_locked);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.modify_timestamp !== null && this.modify_timestamp !== undefined) {
    output.writeFieldBegin('modify_timestamp', Thrift.Type.STRING, 4);
    output.writeString(this.modify_timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

File = function(args) {
  this.file_info = null;
  this.file_type = null;
  this.source = null;
  if (args) {
    if (args.file_info !== undefined) {
      this.file_info = args.file_info;
    }
    if (args.file_type !== undefined) {
      this.file_type = args.file_type;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
  }
};
File.prototype = {};
File.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.file_info = new FileInfo();
        this.file_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.file_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

File.prototype.write = function(output) {
  output.writeStructBegin('File');
  if (this.file_info !== null && this.file_info !== undefined) {
    output.writeFieldBegin('file_info', Thrift.Type.STRUCT, 1);
    this.file_info.write(output);
    output.writeFieldEnd();
  }
  if (this.file_type !== null && this.file_type !== undefined) {
    output.writeFieldBegin('file_type', Thrift.Type.I32, 2);
    output.writeI32(this.file_type);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileDelta = function(args) {
  this.file_info = null;
  this.patches = null;
  if (args) {
    if (args.file_info !== undefined) {
      this.file_info = args.file_info;
    }
    if (args.patches !== undefined) {
      this.patches = args.patches;
    }
  }
};
FileDelta.prototype = {};
FileDelta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.file_info = new FileInfo();
        this.file_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.patches = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Patch();
          elem6.read(input);
          this.patches.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileDelta.prototype.write = function(output) {
  output.writeStructBegin('FileDelta');
  if (this.file_info !== null && this.file_info !== undefined) {
    output.writeFieldBegin('file_info', Thrift.Type.STRUCT, 1);
    this.file_info.write(output);
    output.writeFieldEnd();
  }
  if (this.patches !== null && this.patches !== undefined) {
    output.writeFieldBegin('patches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.patches.length);
    for (var iter7 in this.patches)
    {
      if (this.patches.hasOwnProperty(iter7))
      {
        iter7 = this.patches[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeList = function(args) {
  this.change_list_uuid = null;
  this.user_uuid = null;
  this.timestamp = null;
  this.added_files = null;
  this.modified_files = null;
  this.removed_files = null;
  if (args) {
    if (args.change_list_uuid !== undefined) {
      this.change_list_uuid = args.change_list_uuid;
    }
    if (args.user_uuid !== undefined) {
      this.user_uuid = args.user_uuid;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.added_files !== undefined) {
      this.added_files = args.added_files;
    }
    if (args.modified_files !== undefined) {
      this.modified_files = args.modified_files;
    }
    if (args.removed_files !== undefined) {
      this.removed_files = args.removed_files;
    }
  }
};
ChangeList.prototype = {};
ChangeList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.change_list_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.added_files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new File();
          elem14.read(input);
          this.added_files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.modified_files = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new FileDelta();
          elem21.read(input);
          this.modified_files.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.removed_files = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new FileInfo();
          elem28.read(input);
          this.removed_files.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeList.prototype.write = function(output) {
  output.writeStructBegin('ChangeList');
  if (this.change_list_uuid !== null && this.change_list_uuid !== undefined) {
    output.writeFieldBegin('change_list_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.change_list_uuid);
    output.writeFieldEnd();
  }
  if (this.user_uuid !== null && this.user_uuid !== undefined) {
    output.writeFieldBegin('user_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.user_uuid);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.added_files !== null && this.added_files !== undefined) {
    output.writeFieldBegin('added_files', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.added_files.length);
    for (var iter29 in this.added_files)
    {
      if (this.added_files.hasOwnProperty(iter29))
      {
        iter29 = this.added_files[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.modified_files !== null && this.modified_files !== undefined) {
    output.writeFieldBegin('modified_files', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.modified_files.length);
    for (var iter30 in this.modified_files)
    {
      if (this.modified_files.hasOwnProperty(iter30))
      {
        iter30 = this.modified_files[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removed_files !== null && this.removed_files !== undefined) {
    output.writeFieldBegin('removed_files', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.removed_files.length);
    for (var iter31 in this.removed_files)
    {
      if (this.removed_files.hasOwnProperty(iter31))
      {
        iter31 = this.removed_files[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RepoHeader = function(args) {
  this.repo_uuid = null;
  this.base_repo_uuid = null;
  this.user_uuid = null;
  this.repo_name = null;
  this.creation_timestamp = null;
  this.latest_change_list_uuid = null;
  if (args) {
    if (args.repo_uuid !== undefined) {
      this.repo_uuid = args.repo_uuid;
    }
    if (args.base_repo_uuid !== undefined) {
      this.base_repo_uuid = args.base_repo_uuid;
    }
    if (args.user_uuid !== undefined) {
      this.user_uuid = args.user_uuid;
    }
    if (args.repo_name !== undefined) {
      this.repo_name = args.repo_name;
    }
    if (args.creation_timestamp !== undefined) {
      this.creation_timestamp = args.creation_timestamp;
    }
    if (args.latest_change_list_uuid !== undefined) {
      this.latest_change_list_uuid = args.latest_change_list_uuid;
    }
  }
};
RepoHeader.prototype = {};
RepoHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repo_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base_repo_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.user_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.creation_timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.latest_change_list_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RepoHeader.prototype.write = function(output) {
  output.writeStructBegin('RepoHeader');
  if (this.repo_uuid !== null && this.repo_uuid !== undefined) {
    output.writeFieldBegin('repo_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.repo_uuid);
    output.writeFieldEnd();
  }
  if (this.base_repo_uuid !== null && this.base_repo_uuid !== undefined) {
    output.writeFieldBegin('base_repo_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.base_repo_uuid);
    output.writeFieldEnd();
  }
  if (this.user_uuid !== null && this.user_uuid !== undefined) {
    output.writeFieldBegin('user_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.user_uuid);
    output.writeFieldEnd();
  }
  if (this.repo_name !== null && this.repo_name !== undefined) {
    output.writeFieldBegin('repo_name', Thrift.Type.STRING, 4);
    output.writeString(this.repo_name);
    output.writeFieldEnd();
  }
  if (this.creation_timestamp !== null && this.creation_timestamp !== undefined) {
    output.writeFieldBegin('creation_timestamp', Thrift.Type.STRING, 5);
    output.writeString(this.creation_timestamp);
    output.writeFieldEnd();
  }
  if (this.latest_change_list_uuid !== null && this.latest_change_list_uuid !== undefined) {
    output.writeFieldBegin('latest_change_list_uuid', Thrift.Type.STRING, 6);
    output.writeString(this.latest_change_list_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Repo = function(args) {
  this.repo_header = null;
  this.change_lists = null;
  if (args) {
    if (args.repo_header !== undefined) {
      this.repo_header = args.repo_header;
    }
    if (args.change_lists !== undefined) {
      this.change_lists = args.change_lists;
    }
  }
};
Repo.prototype = {};
Repo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo_header = new RepoHeader();
        this.repo_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.change_lists = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ChangeList();
          elem38.read(input);
          this.change_lists.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repo.prototype.write = function(output) {
  output.writeStructBegin('Repo');
  if (this.repo_header !== null && this.repo_header !== undefined) {
    output.writeFieldBegin('repo_header', Thrift.Type.STRUCT, 1);
    this.repo_header.write(output);
    output.writeFieldEnd();
  }
  if (this.change_lists !== null && this.change_lists !== undefined) {
    output.writeFieldBegin('change_lists', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.change_lists.length);
    for (var iter39 in this.change_lists)
    {
      if (this.change_lists.hasOwnProperty(iter39))
      {
        iter39 = this.change_lists[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Snapshot = function(args) {
  this.repo_info = null;
  this.from_change_list = null;
  this.files = null;
  if (args) {
    if (args.repo_info !== undefined) {
      this.repo_info = args.repo_info;
    }
    if (args.from_change_list !== undefined) {
      this.from_change_list = args.from_change_list;
    }
    if (args.files !== undefined) {
      this.files = args.files;
    }
  }
};
Snapshot.prototype = {};
Snapshot.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo_info = new RepoHeader();
        this.repo_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.from_change_list = new ChangeList();
        this.from_change_list.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.files = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new File();
          elem46.read(input);
          this.files.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Snapshot.prototype.write = function(output) {
  output.writeStructBegin('Snapshot');
  if (this.repo_info !== null && this.repo_info !== undefined) {
    output.writeFieldBegin('repo_info', Thrift.Type.STRUCT, 1);
    this.repo_info.write(output);
    output.writeFieldEnd();
  }
  if (this.from_change_list !== null && this.from_change_list !== undefined) {
    output.writeFieldBegin('from_change_list', Thrift.Type.STRUCT, 2);
    this.from_change_list.write(output);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter47 in this.files)
    {
      if (this.files.hasOwnProperty(iter47))
      {
        iter47 = this.files[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperationFailure = function(args) {
  this.user_message = null;
  if (args) {
    if (args.user_message !== undefined) {
      this.user_message = args.user_message;
    }
  }
};
Thrift.inherits(OperationFailure, Thrift.TException);
OperationFailure.prototype.name = 'OperationFailure';
OperationFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationFailure.prototype.write = function(output) {
  output.writeStructBegin('OperationFailure');
  if (this.user_message !== null && this.user_message !== undefined) {
    output.writeFieldBegin('user_message', Thrift.Type.STRING, 1);
    output.writeString(this.user_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FILE_TYPE_UNKNOWN = 0;
FILE_TYPE_TEXT = 1;
FILE_TYPE_URL = 2;
