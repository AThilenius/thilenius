//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


User = function(args) {
  this.uuid = null;
  this.first_name = null;
  this.last_name = null;
  this.email_address = null;
  this.permission_level = null;
  this.student_id = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.first_name !== undefined) {
      this.first_name = args.first_name;
    }
    if (args.last_name !== undefined) {
      this.last_name = args.last_name;
    }
    if (args.email_address !== undefined) {
      this.email_address = args.email_address;
    }
    if (args.permission_level !== undefined) {
      this.permission_level = args.permission_level;
    }
    if (args.student_id !== undefined) {
      this.student_id = args.student_id;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.first_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.last_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email_address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.permission_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.student_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.first_name !== null && this.first_name !== undefined) {
    output.writeFieldBegin('first_name', Thrift.Type.STRING, 2);
    output.writeString(this.first_name);
    output.writeFieldEnd();
  }
  if (this.last_name !== null && this.last_name !== undefined) {
    output.writeFieldBegin('last_name', Thrift.Type.STRING, 3);
    output.writeString(this.last_name);
    output.writeFieldEnd();
  }
  if (this.email_address !== null && this.email_address !== undefined) {
    output.writeFieldBegin('email_address', Thrift.Type.STRING, 4);
    output.writeString(this.email_address);
    output.writeFieldEnd();
  }
  if (this.permission_level !== null && this.permission_level !== undefined) {
    output.writeFieldBegin('permission_level', Thrift.Type.I32, 5);
    output.writeI32(this.permission_level);
    output.writeFieldEnd();
  }
  if (this.student_id !== null && this.student_id !== undefined) {
    output.writeFieldBegin('student_id', Thrift.Type.STRING, 6);
    output.writeString(this.student_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Token = function(args) {
  this.user_uuid = null;
  this.token_uuid = null;
  this.permission_level = null;
  if (args) {
    if (args.user_uuid !== undefined) {
      this.user_uuid = args.user_uuid;
    }
    if (args.token_uuid !== undefined) {
      this.token_uuid = args.token_uuid;
    }
    if (args.permission_level !== undefined) {
      this.permission_level = args.permission_level;
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token_uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.permission_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.user_uuid !== null && this.user_uuid !== undefined) {
    output.writeFieldBegin('user_uuid', Thrift.Type.STRING, 1);
    output.writeString(this.user_uuid);
    output.writeFieldEnd();
  }
  if (this.token_uuid !== null && this.token_uuid !== undefined) {
    output.writeFieldBegin('token_uuid', Thrift.Type.STRING, 2);
    output.writeString(this.token_uuid);
    output.writeFieldEnd();
  }
  if (this.permission_level !== null && this.permission_level !== undefined) {
    output.writeFieldBegin('permission_level', Thrift.Type.I32, 3);
    output.writeI32(this.permission_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperationFailure = function(args) {
  this.user_message = null;
  if (args) {
    if (args.user_message !== undefined) {
      this.user_message = args.user_message;
    }
  }
};
Thrift.inherits(OperationFailure, Thrift.TException);
OperationFailure.prototype.name = 'OperationFailure';
OperationFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationFailure.prototype.write = function(output) {
  output.writeStructBegin('OperationFailure');
  if (this.user_message !== null && this.user_message !== undefined) {
    output.writeFieldBegin('user_message', Thrift.Type.STRING, 1);
    output.writeString(this.user_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SECONDARY_THRESHOLD = 0;
USER_THRESHOLD = 20;
MODERATOR_THRESHOLD = 40;
ADMIN_THRESHOLD = 60;
SUPER_THRESHOLD = 80;
