#! /bin/bash
. $HOME/thilenius/core/shell/base

DEFINE_boolean clean false 'Clean all docker images and containers' c
DEFINE_boolean new false \
  'Creates a new container even if one is already exists' n

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# Check that we aren't already in a container
docker --version &> /dev/null || EROR 'You are already in a container'

if [ ${FLAGS_clean} -eq ${FLAGS_TRUE} ]; then
  INFO 'Removing untagged docker images'
  docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
  INFO 'Removing all docker containers'
  docker rm $(docker ps -a -q)
else
  if [ ${FLAGS_new} -eq ${FLAGS_TRUE} ]; then
    WARN "Creating a new dev container."
    docker run --privileged -it -v $HOME/thilenius:/root/thilenius -p 80:80\
        athilenius/dev_env
  else
    # Esiting container
    RUNNING_ID=$(docker ps | grep 'athilenius/dev_env' | awk '{print $1}')
    if [ "$RUNNING_ID" != '' ]; then
      INFO "dev_env image already running in container [$RUNNING_ID], joining..."
      docker exec -it $RUNNING_ID /bin/bash
    else
      # Not running, see if we have an old one
      OLD_ID=$(docker ps -a | grep -m 1 'athilenius/dev_env:' | awk '{print $1}')
      if [ "$OLD_ID" != '' ]; then
        INFO "Old dev_env container found [$OLD_ID], restarting..."
        docker start -ai $OLD_ID
      else
        WARN "Creating a new dev container."
        docker run --privileged -it -v $HOME/thilenius:/root/thilenius\
            -p 80:80 athilenius/dev_env
      fi
    fi
  fi
fi
