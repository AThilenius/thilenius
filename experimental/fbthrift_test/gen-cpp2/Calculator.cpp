/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Calculator.h"

#include "Calculator.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace example { namespace cpp2 {

std::unique_ptr<apache::thrift::AsyncProcessor> CalculatorSvIf::getProcessor() {
  return folly::make_unique<CalculatorAsyncProcessor>(this);
}

int64_t CalculatorSvIf::add(int32_t /*num1*/, int32_t /*num2*/) {
  throw apache::thrift::TApplicationException("Function add is unimplemented");
}

folly::Future<int64_t> CalculatorSvIf::future_add(int32_t num1, int32_t num2) {
  return apache::thrift::detail::si::future([&] { return add(num1, num2); });
}

void CalculatorSvIf::async_tm_add(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t num1, int32_t num2) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_add(num1, num2); });
}

int64_t CalculatorSvNull::add(int32_t /*num1*/, int32_t /*num2*/) {
  return 0;
}

const char* CalculatorAsyncProcessor::getServiceName() {
  return "Calculator";
}

folly::Optional<std::string> CalculatorAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void CalculatorAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool CalculatorAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> CalculatorAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> CalculatorAsyncProcessor::cacheKeyMap_ {};
const CalculatorAsyncProcessor::BinaryProtocolProcessMap& CalculatorAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

CalculatorAsyncProcessor::BinaryProtocolProcessMap CalculatorAsyncProcessor::binaryProcessMap_ {
  {"add", &CalculatorAsyncProcessor::_processInThread_add<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
const CalculatorAsyncProcessor::CompactProtocolProcessMap& CalculatorAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

CalculatorAsyncProcessor::CompactProtocolProcessMap CalculatorAsyncProcessor::compactProcessMap_ {
  {"add", &CalculatorAsyncProcessor::_processInThread_add<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

}} // example::cpp2
namespace apache { namespace thrift {

}} // apache::thrift