//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Diff = function(args) {
  this.diff_type = null;
  this.text = null;
  if (args) {
    if (args.diff_type !== undefined) {
      this.diff_type = args.diff_type;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
  }
};
Diff.prototype = {};
Diff.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.diff_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Diff.prototype.write = function(output) {
  output.writeStructBegin('Diff');
  if (this.diff_type !== null && this.diff_type !== undefined) {
    output.writeFieldBegin('diff_type', Thrift.Type.I32, 1);
    output.writeI32(this.diff_type);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Span = function(args) {
  this.from = null;
  this.length = null;
  if (args) {
    if (args.from !== undefined) {
      this.from = args.from;
    }
    if (args.length !== undefined) {
      this.length = args.length;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.from = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.length = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.from !== null && this.from !== undefined) {
    output.writeFieldBegin('from', Thrift.Type.I32, 1);
    output.writeI32(this.from);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I32, 2);
    output.writeI32(this.length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Patch = function(args) {
  this.from_span = null;
  this.to_span = null;
  this.diffs = null;
  if (args) {
    if (args.from_span !== undefined) {
      this.from_span = args.from_span;
    }
    if (args.to_span !== undefined) {
      this.to_span = args.to_span;
    }
    if (args.diffs !== undefined) {
      this.diffs = args.diffs;
    }
  }
};
Patch.prototype = {};
Patch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.from_span = new Span();
        this.from_span.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.to_span = new Span();
        this.to_span.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.diffs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Diff();
          elem6.read(input);
          this.diffs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Patch.prototype.write = function(output) {
  output.writeStructBegin('Patch');
  if (this.from_span !== null && this.from_span !== undefined) {
    output.writeFieldBegin('from_span', Thrift.Type.STRUCT, 1);
    this.from_span.write(output);
    output.writeFieldEnd();
  }
  if (this.to_span !== null && this.to_span !== undefined) {
    output.writeFieldBegin('to_span', Thrift.Type.STRUCT, 2);
    this.to_span.write(output);
    output.writeFieldEnd();
  }
  if (this.diffs !== null && this.diffs !== undefined) {
    output.writeFieldBegin('diffs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.diffs.length);
    for (var iter7 in this.diffs)
    {
      if (this.diffs.hasOwnProperty(iter7))
      {
        iter7 = this.diffs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DIFF_TYPE_UNKNOWN = 0;
DIFF_TYPE_INSERT = 1;
DIFF_TYPE_DELETE = 2;
DIFF_TYPE_EQUAL = 3;
