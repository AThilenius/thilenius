//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Billet_CreateSession_args = function(args) {
  this.sentinel_token = null;
  if (args) {
    if (args.sentinel_token !== undefined) {
      this.sentinel_token = args.sentinel_token;
    }
  }
};
Billet_CreateSession_args.prototype = {};
Billet_CreateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentinel_token = new Token();
        this.sentinel_token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_CreateSession_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_CreateSession_args');
  if (this.sentinel_token !== null && this.sentinel_token !== undefined) {
    output.writeFieldBegin('sentinel_token', Thrift.Type.STRUCT, 1);
    this.sentinel_token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_CreateSession_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_CreateSession_result.prototype = {};
Billet_CreateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Session();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_CreateSession_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_CreateSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_ExecuteCMakeRepo_args = function(args) {
  this.session = null;
  this.repo_header = null;
  this.staged_change_lists = null;
  this.application_args = null;
  if (args) {
    if (args.session !== undefined) {
      this.session = args.session;
    }
    if (args.repo_header !== undefined) {
      this.repo_header = args.repo_header;
    }
    if (args.staged_change_lists !== undefined) {
      this.staged_change_lists = args.staged_change_lists;
    }
    if (args.application_args !== undefined) {
      this.application_args = args.application_args;
    }
  }
};
Billet_ExecuteCMakeRepo_args.prototype = {};
Billet_ExecuteCMakeRepo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.session = new Session();
        this.session.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo_header = new RepoHeader();
        this.repo_header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.staged_change_lists = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ChangeList();
          elem6.read(input);
          this.staged_change_lists.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.application_args = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.application_args.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_ExecuteCMakeRepo_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_ExecuteCMakeRepo_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRUCT, 1);
    this.session.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_header !== null && this.repo_header !== undefined) {
    output.writeFieldBegin('repo_header', Thrift.Type.STRUCT, 2);
    this.repo_header.write(output);
    output.writeFieldEnd();
  }
  if (this.staged_change_lists !== null && this.staged_change_lists !== undefined) {
    output.writeFieldBegin('staged_change_lists', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.staged_change_lists.length);
    for (var iter14 in this.staged_change_lists)
    {
      if (this.staged_change_lists.hasOwnProperty(iter14))
      {
        iter14 = this.staged_change_lists[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.application_args !== null && this.application_args !== undefined) {
    output.writeFieldBegin('application_args', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.application_args.length);
    for (var iter15 in this.application_args)
    {
      if (this.application_args.hasOwnProperty(iter15))
      {
        iter15 = this.application_args[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_ExecuteCMakeRepo_result = function(args) {
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_ExecuteCMakeRepo_result.prototype = {};
Billet_ExecuteCMakeRepo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_ExecuteCMakeRepo_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_ExecuteCMakeRepo_result');
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_QueryOutputAfterLine_args = function(args) {
  this.session = null;
  this.line = null;
  if (args) {
    if (args.session !== undefined) {
      this.session = args.session;
    }
    if (args.line !== undefined) {
      this.line = args.line;
    }
  }
};
Billet_QueryOutputAfterLine_args.prototype = {};
Billet_QueryOutputAfterLine_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.session = new Session();
        this.session.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_QueryOutputAfterLine_args.prototype.write = function(output) {
  output.writeStructBegin('Billet_QueryOutputAfterLine_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRUCT, 1);
    this.session.write(output);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 2);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Billet_QueryOutputAfterLine_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Billet_QueryOutputAfterLine_result.prototype = {};
Billet_QueryOutputAfterLine_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ApplicationOutput();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Billet_QueryOutputAfterLine_result.prototype.write = function(output) {
  output.writeStructBegin('Billet_QueryOutputAfterLine_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BilletClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BilletClient.prototype = {};
BilletClient.prototype.CreateSession = function(sentinel_token, callback) {
  if (callback === undefined) {
    this.send_CreateSession(sentinel_token);
    return this.recv_CreateSession();
  } else {
    var postData = this.send_CreateSession(sentinel_token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateSession);
  }
};

BilletClient.prototype.send_CreateSession = function(sentinel_token, callback) {
  this.output.writeMessageBegin('CreateSession', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_CreateSession_args();
  args.sentinel_token = sentinel_token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_CreateSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_CreateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateSession failed: unknown result';
};
BilletClient.prototype.ExecuteCMakeRepo = function(session, repo_header, staged_change_lists, application_args, callback) {
  if (callback === undefined) {
    this.send_ExecuteCMakeRepo(session, repo_header, staged_change_lists, application_args);
    this.recv_ExecuteCMakeRepo();
  } else {
    var postData = this.send_ExecuteCMakeRepo(session, repo_header, staged_change_lists, application_args, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ExecuteCMakeRepo);
  }
};

BilletClient.prototype.send_ExecuteCMakeRepo = function(session, repo_header, staged_change_lists, application_args, callback) {
  this.output.writeMessageBegin('ExecuteCMakeRepo', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_ExecuteCMakeRepo_args();
  args.session = session;
  args.repo_header = repo_header;
  args.staged_change_lists = staged_change_lists;
  args.application_args = application_args;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_ExecuteCMakeRepo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_ExecuteCMakeRepo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  return;
};
BilletClient.prototype.QueryOutputAfterLine = function(session, line, callback) {
  if (callback === undefined) {
    this.send_QueryOutputAfterLine(session, line);
    return this.recv_QueryOutputAfterLine();
  } else {
    var postData = this.send_QueryOutputAfterLine(session, line, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_QueryOutputAfterLine);
  }
};

BilletClient.prototype.send_QueryOutputAfterLine = function(session, line, callback) {
  this.output.writeMessageBegin('QueryOutputAfterLine', Thrift.MessageType.CALL, this.seqid);
  var args = new Billet_QueryOutputAfterLine_args();
  args.session = session;
  args.line = line;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BilletClient.prototype.recv_QueryOutputAfterLine = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Billet_QueryOutputAfterLine_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'QueryOutputAfterLine failed: unknown result';
};
