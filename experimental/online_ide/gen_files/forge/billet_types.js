//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Session = function(args) {
  this.uuid = null;
  this.session_key = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.session_key !== undefined) {
      this.session_key = args.session_key;
    }
  }
};
Session.prototype = {};
Session.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_key = new Token();
        this.session_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Session.prototype.write = function(output) {
  output.writeStructBegin('Session');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.session_key !== null && this.session_key !== undefined) {
    output.writeFieldBegin('session_key', Thrift.Type.STRUCT, 2);
    this.session_key.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fixit = function(args) {
  this.from_line = null;
  this.from_column = null;
  this.to_line = null;
  this.to_column = null;
  this.text = null;
  if (args) {
    if (args.from_line !== undefined) {
      this.from_line = args.from_line;
    }
    if (args.from_column !== undefined) {
      this.from_column = args.from_column;
    }
    if (args.to_line !== undefined) {
      this.to_line = args.to_line;
    }
    if (args.to_column !== undefined) {
      this.to_column = args.to_column;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
  }
};
Fixit.prototype = {};
Fixit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.from_line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.from_column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.to_line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.to_column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.text = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fixit.prototype.write = function(output) {
  output.writeStructBegin('Fixit');
  if (this.from_line !== null && this.from_line !== undefined) {
    output.writeFieldBegin('from_line', Thrift.Type.I32, 1);
    output.writeI32(this.from_line);
    output.writeFieldEnd();
  }
  if (this.from_column !== null && this.from_column !== undefined) {
    output.writeFieldBegin('from_column', Thrift.Type.I32, 2);
    output.writeI32(this.from_column);
    output.writeFieldEnd();
  }
  if (this.to_line !== null && this.to_line !== undefined) {
    output.writeFieldBegin('to_line', Thrift.Type.I32, 3);
    output.writeI32(this.to_line);
    output.writeFieldEnd();
  }
  if (this.to_column !== null && this.to_column !== undefined) {
    output.writeFieldBegin('to_column', Thrift.Type.I32, 4);
    output.writeI32(this.to_column);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.I32, 5);
    output.writeI32(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompilerMessage = function(args) {
  this.relative_path = null;
  this.compiler_message_type = null;
  this.line = null;
  this.column = null;
  this.message = null;
  this.full_message = null;
  if (args) {
    if (args.relative_path !== undefined) {
      this.relative_path = args.relative_path;
    }
    if (args.compiler_message_type !== undefined) {
      this.compiler_message_type = args.compiler_message_type;
    }
    if (args.line !== undefined) {
      this.line = args.line;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.full_message !== undefined) {
      this.full_message = args.full_message;
    }
  }
};
CompilerMessage.prototype = {};
CompilerMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.relative_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compiler_message_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.full_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompilerMessage.prototype.write = function(output) {
  output.writeStructBegin('CompilerMessage');
  if (this.relative_path !== null && this.relative_path !== undefined) {
    output.writeFieldBegin('relative_path', Thrift.Type.STRING, 1);
    output.writeString(this.relative_path);
    output.writeFieldEnd();
  }
  if (this.compiler_message_type !== null && this.compiler_message_type !== undefined) {
    output.writeFieldBegin('compiler_message_type', Thrift.Type.I32, 2);
    output.writeI32(this.compiler_message_type);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 3);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.I32, 4);
    output.writeI32(this.column);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.full_message !== null && this.full_message !== undefined) {
    output.writeFieldBegin('full_message', Thrift.Type.STRING, 6);
    output.writeString(this.full_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ApplicationOutput = function(args) {
  this.did_terminate = null;
  this.termination_code = null;
  this.standard_out = null;
  this.error_out = null;
  if (args) {
    if (args.did_terminate !== undefined) {
      this.did_terminate = args.did_terminate;
    }
    if (args.termination_code !== undefined) {
      this.termination_code = args.termination_code;
    }
    if (args.standard_out !== undefined) {
      this.standard_out = args.standard_out;
    }
    if (args.error_out !== undefined) {
      this.error_out = args.error_out;
    }
  }
};
ApplicationOutput.prototype = {};
ApplicationOutput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.did_terminate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.termination_code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.standard_out = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.error_out = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApplicationOutput.prototype.write = function(output) {
  output.writeStructBegin('ApplicationOutput');
  if (this.did_terminate !== null && this.did_terminate !== undefined) {
    output.writeFieldBegin('did_terminate', Thrift.Type.BOOL, 1);
    output.writeBool(this.did_terminate);
    output.writeFieldEnd();
  }
  if (this.termination_code !== null && this.termination_code !== undefined) {
    output.writeFieldBegin('termination_code', Thrift.Type.I32, 2);
    output.writeI32(this.termination_code);
    output.writeFieldEnd();
  }
  if (this.standard_out !== null && this.standard_out !== undefined) {
    output.writeFieldBegin('standard_out', Thrift.Type.STRING, 3);
    output.writeString(this.standard_out);
    output.writeFieldEnd();
  }
  if (this.error_out !== null && this.error_out !== undefined) {
    output.writeFieldBegin('error_out', Thrift.Type.STRING, 4);
    output.writeString(this.error_out);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperationFailure = function(args) {
  this.user_message = null;
  if (args) {
    if (args.user_message !== undefined) {
      this.user_message = args.user_message;
    }
  }
};
Thrift.inherits(OperationFailure, Thrift.TException);
OperationFailure.prototype.name = 'OperationFailure';
OperationFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationFailure.prototype.write = function(output) {
  output.writeStructBegin('OperationFailure');
  if (this.user_message !== null && this.user_message !== undefined) {
    output.writeFieldBegin('user_message', Thrift.Type.STRING, 1);
    output.writeString(this.user_message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

COMPILER_MESSAGE_TYPE_UNKNOWN = 0;
COMPILER_MESSAGE_TYPE_ERROR = 1;
COMPILER_MESSAGE_TYPE_WARNING = 2;
COMPILER_MESSAGE_TYPE_NOTE = 3;
