//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Sentinel_CreateUser_args = function(args) {
  this.new_user_partial = null;
  this.password = null;
  if (args) {
    if (args.new_user_partial !== undefined) {
      this.new_user_partial = args.new_user_partial;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
Sentinel_CreateUser_args.prototype = {};
Sentinel_CreateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_user_partial = new User();
        this.new_user_partial.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateUser_args.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateUser_args');
  if (this.new_user_partial !== null && this.new_user_partial !== undefined) {
    output.writeFieldBegin('new_user_partial', Thrift.Type.STRUCT, 1);
    this.new_user_partial.write(output);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CreateUser_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Sentinel_CreateUser_result.prototype = {};
Sentinel_CreateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateUser_result.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CreateToken_args = function(args) {
  this.email_address = null;
  this.password = null;
  if (args) {
    if (args.email_address !== undefined) {
      this.email_address = args.email_address;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
Sentinel_CreateToken_args.prototype = {};
Sentinel_CreateToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email_address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateToken_args.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateToken_args');
  if (this.email_address !== null && this.email_address !== undefined) {
    output.writeFieldBegin('email_address', Thrift.Type.STRING, 1);
    output.writeString(this.email_address);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CreateToken_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Sentinel_CreateToken_result.prototype = {};
Sentinel_CreateToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateToken_result.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CreateSecondaryToken_args = function(args) {
  this.token = null;
  this.permission_level = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.permission_level !== undefined) {
      this.permission_level = args.permission_level;
    }
  }
};
Sentinel_CreateSecondaryToken_args.prototype = {};
Sentinel_CreateSecondaryToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.permission_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateSecondaryToken_args.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateSecondaryToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.permission_level !== null && this.permission_level !== undefined) {
    output.writeFieldBegin('permission_level', Thrift.Type.I32, 2);
    output.writeI32(this.permission_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CreateSecondaryToken_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Sentinel_CreateSecondaryToken_result.prototype = {};
Sentinel_CreateSecondaryToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CreateSecondaryToken_result.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CreateSecondaryToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CheckToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
Sentinel_CheckToken_args.prototype = {};
Sentinel_CheckToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CheckToken_args.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CheckToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_CheckToken_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Sentinel_CheckToken_result.prototype = {};
Sentinel_CheckToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_CheckToken_result.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_CheckToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_FindUser_args = function(args) {
  this.token = null;
  this.user_partial = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.user_partial !== undefined) {
      this.user_partial = args.user_partial;
    }
  }
};
Sentinel_FindUser_args.prototype = {};
Sentinel_FindUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user_partial = new User();
        this.user_partial.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_FindUser_args.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_FindUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.user_partial !== null && this.user_partial !== undefined) {
    output.writeFieldBegin('user_partial', Thrift.Type.STRUCT, 2);
    this.user_partial.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentinel_FindUser_result = function(args) {
  this.success = null;
  this.operation_failure = null;
  if (args instanceof OperationFailure) {
    this.operation_failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.operation_failure !== undefined) {
      this.operation_failure = args.operation_failure;
    }
  }
};
Sentinel_FindUser_result.prototype = {};
Sentinel_FindUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_failure = new OperationFailure();
        this.operation_failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentinel_FindUser_result.prototype.write = function(output) {
  output.writeStructBegin('Sentinel_FindUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_failure !== null && this.operation_failure !== undefined) {
    output.writeFieldBegin('operation_failure', Thrift.Type.STRUCT, 1);
    this.operation_failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SentinelClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SentinelClient.prototype = {};
SentinelClient.prototype.CreateUser = function(new_user_partial, password, callback) {
  if (callback === undefined) {
    this.send_CreateUser(new_user_partial, password);
    return this.recv_CreateUser();
  } else {
    var postData = this.send_CreateUser(new_user_partial, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateUser);
  }
};

SentinelClient.prototype.send_CreateUser = function(new_user_partial, password, callback) {
  this.output.writeMessageBegin('CreateUser', Thrift.MessageType.CALL, this.seqid);
  var args = new Sentinel_CreateUser_args();
  args.new_user_partial = new_user_partial;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SentinelClient.prototype.recv_CreateUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sentinel_CreateUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateUser failed: unknown result';
};
SentinelClient.prototype.CreateToken = function(email_address, password, callback) {
  if (callback === undefined) {
    this.send_CreateToken(email_address, password);
    return this.recv_CreateToken();
  } else {
    var postData = this.send_CreateToken(email_address, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateToken);
  }
};

SentinelClient.prototype.send_CreateToken = function(email_address, password, callback) {
  this.output.writeMessageBegin('CreateToken', Thrift.MessageType.CALL, this.seqid);
  var args = new Sentinel_CreateToken_args();
  args.email_address = email_address;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SentinelClient.prototype.recv_CreateToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sentinel_CreateToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateToken failed: unknown result';
};
SentinelClient.prototype.CreateSecondaryToken = function(token, permission_level, callback) {
  if (callback === undefined) {
    this.send_CreateSecondaryToken(token, permission_level);
    return this.recv_CreateSecondaryToken();
  } else {
    var postData = this.send_CreateSecondaryToken(token, permission_level, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateSecondaryToken);
  }
};

SentinelClient.prototype.send_CreateSecondaryToken = function(token, permission_level, callback) {
  this.output.writeMessageBegin('CreateSecondaryToken', Thrift.MessageType.CALL, this.seqid);
  var args = new Sentinel_CreateSecondaryToken_args();
  args.token = token;
  args.permission_level = permission_level;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SentinelClient.prototype.recv_CreateSecondaryToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sentinel_CreateSecondaryToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateSecondaryToken failed: unknown result';
};
SentinelClient.prototype.CheckToken = function(token, callback) {
  if (callback === undefined) {
    this.send_CheckToken(token);
    return this.recv_CheckToken();
  } else {
    var postData = this.send_CheckToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CheckToken);
  }
};

SentinelClient.prototype.send_CheckToken = function(token, callback) {
  this.output.writeMessageBegin('CheckToken', Thrift.MessageType.CALL, this.seqid);
  var args = new Sentinel_CheckToken_args();
  args.token = token;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SentinelClient.prototype.recv_CheckToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sentinel_CheckToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CheckToken failed: unknown result';
};
SentinelClient.prototype.FindUser = function(token, user_partial, callback) {
  if (callback === undefined) {
    this.send_FindUser(token, user_partial);
    return this.recv_FindUser();
  } else {
    var postData = this.send_FindUser(token, user_partial, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_FindUser);
  }
};

SentinelClient.prototype.send_FindUser = function(token, user_partial, callback) {
  this.output.writeMessageBegin('FindUser', Thrift.MessageType.CALL, this.seqid);
  var args = new Sentinel_FindUser_args();
  args.token = token;
  args.user_partial = user_partial;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SentinelClient.prototype.recv_FindUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Sentinel_FindUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.operation_failure) {
    throw result.operation_failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'FindUser failed: unknown result';
};
